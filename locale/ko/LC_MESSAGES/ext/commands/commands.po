# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.4.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-02-28 20:04+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../ext/commands/commands.rst:6
msgid "Commands"
msgstr "명령어"

#: ../../ext/commands/commands.rst:8
msgid ""
"One of the most appealing aspect of the command extension is how easy it "
"is to define commands and how you can arbitrarily nest groups and "
"commands to have a rich sub-command system."
msgstr ""
"명령어 확장자에서 가장 매력적인 것은 명령어를 정의하는 것이 매우 쉽고 당신 마음대로 그룹과 명령어를 묶어서 풍부한 서브커맨드 "
"시스템을 가질 수 있다는 것입니다."

#: ../../ext/commands/commands.rst:11
msgid ""
"Commands are defined by attaching it to a regular Python function. The "
"command is then invoked by the user using a similar signature to the "
"Python function."
msgstr "명령어는 기본적인 Python 함수에 붙여서 정의됩니다. 그다음에 유저가 Python 함수처럼 비슷한 서명을 사용해서 실행됩니다."

#: ../../ext/commands/commands.rst:14
msgid "For example, in the given command definition:"
msgstr "예를 들면, 주어진 명령어 정의에서:"

#: ../../ext/commands/commands.rst:22
msgid "With the following prefix (``$``), it would be invoked by the user via:"
msgstr "프리픽스로 (``$``) 를 갖고 있을 때, 이 명령어는 이렇게 유저에 의해 실행됩니다:"

#: ../../ext/commands/commands.rst:28
msgid ""
"A command must always have at least one parameter, ``ctx``, which is the "
":class:`.Context` as the first one."
msgstr "명령어는 항상 매개변수로 처음에 :class:`.Context`\\인 ``ctx`` 를 갖고 있어야 합니다."

#: ../../ext/commands/commands.rst:30
msgid ""
"There are two ways of registering a command. The first one is by using "
":meth:`.Bot.command` decorator, as seen in the example above. The second "
"is using the :func:`~ext.commands.command` decorator followed by "
":meth:`.Bot.add_command` on the instance."
msgstr ""
"명령어를 등록하는 방법은 두가지가 있습니다. 첫번째는 위의 예시처럼 :meth:`.Bot.command` 데코레이터를 사용하는 "
"것입니다. 두번째는 인스턴스에서 :meth:`.Bot.add_command` 다음에 오는 "
":func:`~ext.commands.command` 데코레이터를 사용하는 것입니다."

#: ../../ext/commands/commands.rst:34
msgid "Essentially, these two are equivalent: ::"
msgstr "기본적으로는, 이 둘은 같습니다: ::"

#: ../../ext/commands/commands.rst:52
msgid ""
"Since the :meth:`.Bot.command` decorator is shorter and easier to "
"comprehend, it will be the one used throughout the documentation here."
msgstr ":meth:`.Bot.command` 데코레이터가 더 짧고 이해하기 더 쉽기 때문에 이 문서에서 사용될 것입니다."

#: ../../ext/commands/commands.rst:55
msgid ""
"Any parameter that is accepted by the :class:`.Command` constructor can "
"be passed into the decorator. For example, to change the name to "
"something other than the function would be as simple as doing this:"
msgstr ""
":class:`.Command` 생성자에 의해 받아들여진 매개변수는 데코레이터로 들어갈 수 있습니다. 예를 들어서, 함수 이외의 "
"이름으로 변경하는 것은 이렇게 하는 것처럼 간단합니다:"

#: ../../ext/commands/commands.rst:65
msgid "Parameters"
msgstr "매개변수"

#: ../../ext/commands/commands.rst:67
msgid ""
"Since we define commands by making Python functions, we also define the "
"argument passing behaviour by the function parameters."
msgstr "우리는 명령어를 Python 함수를 만드는 것으로 정의하고 있기 때문에, 우리는 지나가는 전달인자도 함수 매개변수로 정의합니다."

#: ../../ext/commands/commands.rst:70
msgid ""
"Certain parameter types do different things in the user side and most "
"forms of parameter types are supported."
msgstr "특정 매개변수 종류는 유저쪽에서 다른 것을 하고 대부분의 매개변수 형태는 지원됩니다."

#: ../../ext/commands/commands.rst:73
msgid "Positional"
msgstr "위치"

#: ../../ext/commands/commands.rst:75
msgid ""
"The most basic form of parameter passing is the positional parameter. "
"This is where we pass a parameter as-is:"
msgstr ""

#: ../../ext/commands/commands.rst:84
msgid ""
"On the bot using side, you can provide positional arguments by just "
"passing a regular string:"
msgstr ""

#: ../../ext/commands/commands.rst:88
msgid "To make use of a word with spaces in between, you should quote it:"
msgstr ""

#: ../../ext/commands/commands.rst:92
msgid ""
"As a note of warning, if you omit the quotes, you will only get the first"
" word:"
msgstr ""

#: ../../ext/commands/commands.rst:96
msgid ""
"Since positional arguments are just regular Python arguments, you can "
"have as many as you want:"
msgstr ""

#: ../../ext/commands/commands.rst:105
msgid "Variable"
msgstr "변수"

#: ../../ext/commands/commands.rst:107
msgid ""
"Sometimes you want users to pass in an undetermined number of parameters."
" The library supports this similar to how variable list parameters are "
"done in Python:"
msgstr ""

#: ../../ext/commands/commands.rst:116
msgid ""
"This allows our user to accept either one or many arguments as they "
"please. This works similar to positional arguments, so multi-word "
"parameters should be quoted."
msgstr ""

#: ../../ext/commands/commands.rst:119
msgid "For example, on the bot side:"
msgstr ""

#: ../../ext/commands/commands.rst:123
msgid ""
"If the user wants to input a multi-word argument, they have to quote it "
"like earlier:"
msgstr ""

#: ../../ext/commands/commands.rst:127
msgid ""
"Do note that similar to the Python function behaviour, a user can "
"technically pass no arguments at all:"
msgstr ""

#: ../../ext/commands/commands.rst:132
msgid ""
"Since the ``args`` variable is a :class:`py:tuple`, you can do anything "
"you would usually do with one."
msgstr ""

#: ../../ext/commands/commands.rst:136
msgid "Keyword-Only Arguments"
msgstr "키워드 전용 전달인자"

#: ../../ext/commands/commands.rst:138
msgid ""
"When you want to handle parsing of the argument yourself or do not feel "
"like you want to wrap multi-word user input into quotes, you can ask the "
"library to give you the rest as a single argument. We do this by using a "
"**keyword-only argument**, seen below:"
msgstr ""

#: ../../ext/commands/commands.rst:150
msgid "You can only have one keyword-only argument due to parsing ambiguities."
msgstr ""

#: ../../ext/commands/commands.rst:152
msgid "On the bot side, we do not need to quote input with spaces:"
msgstr ""

#: ../../ext/commands/commands.rst:156
msgid "Do keep in mind that wrapping it in quotes leaves it as-is:"
msgstr ""

#: ../../ext/commands/commands.rst:160
msgid ""
"By default, the keyword-only arguments are stripped of white space to "
"make it easier to work with. This behaviour can be toggled by the "
":attr:`.Command.rest_is_raw` argument in the decorator."
msgstr ""

#: ../../ext/commands/commands.rst:166
msgid "Invocation Context"
msgstr ""

#: ../../ext/commands/commands.rst:168
msgid ""
"As seen earlier, every command must take at least a single parameter, "
"called the :class:`~ext.commands.Context`."
msgstr ""

#: ../../ext/commands/commands.rst:170
msgid ""
"This parameter gives you access to something called the \"invocation "
"context\". Essentially all the information you need to know how the "
"command was executed. It contains a lot of useful information:"
msgstr ""

#: ../../ext/commands/commands.rst:173
msgid ":attr:`.Context.guild` to fetch the :class:`Guild` of the command, if any."
msgstr ""

#: ../../ext/commands/commands.rst:174
msgid ":attr:`.Context.message` to fetch the :class:`Message` of the command."
msgstr ""

#: ../../ext/commands/commands.rst:175
msgid ""
":attr:`.Context.author` to fetch the :class:`Member` or :class:`User` "
"that called the command."
msgstr ""

#: ../../ext/commands/commands.rst:176
msgid ""
":meth:`.Context.send` to send a message to the channel the command was "
"used in."
msgstr ""

#: ../../ext/commands/commands.rst:178
msgid ""
"The context implements the :class:`abc.Messageable` interface, so "
"anything you can do on a :class:`abc.Messageable` you can do on the "
":class:`~ext.commands.Context`."
msgstr ""

#: ../../ext/commands/commands.rst:182
msgid "Converters"
msgstr ""

#: ../../ext/commands/commands.rst:184
msgid ""
"Adding bot arguments with function parameters is only the first step in "
"defining your bot's command interface. To actually make use of the "
"arguments, we usually want to convert the data into a target type. We "
"call these :ref:`ext_commands_api_converters`."
msgstr ""

#: ../../ext/commands/commands.rst:188
msgid "Converters come in a few flavours:"
msgstr ""

#: ../../ext/commands/commands.rst:190
msgid ""
"A regular callable object that takes an argument as a sole parameter and "
"returns a different type."
msgstr ""

#: ../../ext/commands/commands.rst:192
msgid ""
"These range from your own function, to something like :class:`bool` or "
":class:`int`."
msgstr ""

#: ../../ext/commands/commands.rst:194
msgid "A custom class that inherits from :class:`~ext.commands.Converter`."
msgstr ""

#: ../../ext/commands/commands.rst:197
msgid "Basic Converters"
msgstr ""

#: ../../ext/commands/commands.rst:199
msgid ""
"At its core, a basic converter is a callable that takes in an argument "
"and turns it into something else."
msgstr ""

#: ../../ext/commands/commands.rst:201
msgid ""
"For example, if we wanted to add two numbers together, we could request "
"that they are turned into integers for us by specifying the converter:"
msgstr ""

#: ../../ext/commands/commands.rst:210
msgid ""
"We specify converters by using something called a **function "
"annotation**. This is a Python 3 exclusive feature that was introduced in"
" :pep:`3107`."
msgstr ""

#: ../../ext/commands/commands.rst:213
msgid ""
"This works with any callable, such as a function that would convert a "
"string to all upper-case:"
msgstr ""

#: ../../ext/commands/commands.rst:225
msgid "bool"
msgstr ""

#: ../../ext/commands/commands.rst:227
msgid ""
"Unlike the other basic converters, the :class:`bool` converter is treated"
" slightly different. Instead of casting directly to the :class:`bool` "
"type, which would result in any non-empty argument returning ``True``, it"
" instead evaluates the argument as ``True`` or ``False`` based on its "
"given content:"
msgstr ""

#: ../../ext/commands/commands.rst:239
msgid "Advanced Converters"
msgstr ""

#: ../../ext/commands/commands.rst:241
msgid ""
"Sometimes a basic converter doesn't have enough information that we need."
" For example, sometimes we want to get some information from the "
":class:`Message` that called the command or we want to do some "
"asynchronous processing."
msgstr ""

#: ../../ext/commands/commands.rst:244
msgid ""
"For this, the library provides the :class:`~ext.commands.Converter` "
"interface. This allows you to have access to the :class:`.Context` and "
"have the callable be asynchronous. Defining a custom converter using this"
" interface requires overriding a single method, "
":meth:`.Converter.convert`."
msgstr ""

#: ../../ext/commands/commands.rst:248
msgid "An example converter:"
msgstr ""

#: ../../ext/commands/commands.rst:263
msgid ""
"The converter provided can either be constructed or not. Essentially "
"these two are equivalent:"
msgstr ""

#: ../../ext/commands/commands.rst:277
msgid ""
"Having the possibility of the converter be constructed allows you to set "
"up some state in the converter's ``__init__`` for fine tuning the "
"converter. An example of this is actually in the library, "
":class:`~ext.commands.clean_content`."
msgstr ""

#: ../../ext/commands/commands.rst:293
msgid ""
"If a converter fails to convert an argument to its designated target "
"type, the :exc:`.BadArgument` exception must be raised."
msgstr ""

#: ../../ext/commands/commands.rst:297
msgid "Inline Advanced Converters"
msgstr ""

#: ../../ext/commands/commands.rst:299
msgid ""
"If we don't want to inherit from :class:`~ext.commands.Converter`, we can"
" still provide a converter that has the advanced functionalities of an "
"advanced converter and save us from specifying two types."
msgstr ""

#: ../../ext/commands/commands.rst:302
msgid ""
"For example, a common idiom would be to have a class and a converter for "
"that class:"
msgstr ""

#: ../../ext/commands/commands.rst:328
msgid ""
"This can get tedious, so an inline advanced converter is possible through"
" a ``classmethod`` inside the type:"
msgstr ""

#: ../../ext/commands/commands.rst:355
msgid "Discord Converters"
msgstr ""

#: ../../ext/commands/commands.rst:357
msgid ""
"Working with :ref:`discord_api_models` is a fairly common thing when "
"defining commands, as a result the library makes working with them easy."
msgstr ""

#: ../../ext/commands/commands.rst:360
msgid ""
"For example, to receive a :class:`Member` you can just pass it as a "
"converter:"
msgstr ""

#: ../../ext/commands/commands.rst:368
msgid ""
"When this command is executed, it attempts to convert the string given "
"into a :class:`Member` and then passes it as a parameter for the "
"function. This works by checking if the string is a mention, an ID, a "
"nickname, a username + discriminator, or just a regular username. The "
"default set of converters have been written to be as easy to use as "
"possible."
msgstr ""

#: ../../ext/commands/commands.rst:372
msgid "A lot of discord models work out of the gate as a parameter:"
msgstr ""

#: ../../ext/commands/commands.rst:374 ../../ext/commands/commands.rst:397
msgid ":class:`Member`"
msgstr ":class:`Member`"

#: ../../ext/commands/commands.rst:375 ../../ext/commands/commands.rst:403
msgid ":class:`User`"
msgstr ":class:`User`"

#: ../../ext/commands/commands.rst:376 ../../ext/commands/commands.rst:405
msgid ":class:`TextChannel`"
msgstr ":class:`TextChannel`"

#: ../../ext/commands/commands.rst:377 ../../ext/commands/commands.rst:407
msgid ":class:`VoiceChannel`"
msgstr ":class:`VoiceChannel`"

#: ../../ext/commands/commands.rst:378 ../../ext/commands/commands.rst:409
msgid ":class:`CategoryChannel`"
msgstr ":class:`CategoryChannel`"

#: ../../ext/commands/commands.rst:379 ../../ext/commands/commands.rst:411
msgid ":class:`Role`"
msgstr ":class:`Role`"

#: ../../ext/commands/commands.rst:380
msgid ":class:`Message` (since v1.1)"
msgstr ":class:`Message` (v1.1 부터)"

#: ../../ext/commands/commands.rst:381
#, fuzzy
msgid ":class:`PartialMessage` (since v1.7)"
msgstr ":class:`Message` (v1.1 부터)"

#: ../../ext/commands/commands.rst:382 ../../ext/commands/commands.rst:413
msgid ":class:`Invite`"
msgstr ":class:`Invite`"

#: ../../ext/commands/commands.rst:383 ../../ext/commands/commands.rst:415
msgid ":class:`Game`"
msgstr ":class:`Game`"

#: ../../ext/commands/commands.rst:384 ../../ext/commands/commands.rst:417
msgid ":class:`Emoji`"
msgstr ":class:`Emoji`"

#: ../../ext/commands/commands.rst:385 ../../ext/commands/commands.rst:419
msgid ":class:`PartialEmoji`"
msgstr ":class:`PartialEmoji`"

#: ../../ext/commands/commands.rst:386 ../../ext/commands/commands.rst:421
msgid ":class:`Colour`"
msgstr ":class:`Colour`"

#: ../../ext/commands/commands.rst:388
msgid ""
"Having any of these set as the converter will intelligently convert the "
"argument to the appropriate target type you specify."
msgstr ""

#: ../../ext/commands/commands.rst:391
msgid ""
"Under the hood, these are implemented by the "
":ref:`ext_commands_adv_converters` interface. A table of the equivalent "
"converter is given below:"
msgstr ""

#: ../../ext/commands/commands.rst:395
msgid "Discord Class"
msgstr "디스코드 클래스"

#: ../../ext/commands/commands.rst:395
msgid "Converter"
msgstr "변환기"

#: ../../ext/commands/commands.rst:397
msgid ":class:`~ext.commands.MemberConverter`"
msgstr ":class:`~ext.commands.MemberConverter`"

#: ../../ext/commands/commands.rst:399
msgid ":class:`Message`"
msgstr ":class:`Message`"

#: ../../ext/commands/commands.rst:399
msgid ":class:`~ext.commands.MessageConverter`"
msgstr ":class:`~ext.commands.MessageConverter`"

#: ../../ext/commands/commands.rst:401
#, fuzzy
msgid ":class:`PartialMessage`"
msgstr ":class:`Message`"

#: ../../ext/commands/commands.rst:401
#, fuzzy
msgid ":class:`~ext.commands.PartialMessageConveter`"
msgstr ":class:`~ext.commands.MessageConverter`"

#: ../../ext/commands/commands.rst:403
msgid ":class:`~ext.commands.UserConverter`"
msgstr ":class:`~ext.commands.UserConverter`"

#: ../../ext/commands/commands.rst:405
msgid ":class:`~ext.commands.TextChannelConverter`"
msgstr ":class:`~ext.commands.TextChannelConverter`"

#: ../../ext/commands/commands.rst:407
msgid ":class:`~ext.commands.VoiceChannelConverter`"
msgstr ":class:`~ext.commands.VoiceChannelConverter`"

#: ../../ext/commands/commands.rst:409
msgid ":class:`~ext.commands.CategoryChannelConverter`"
msgstr ":class:`~ext.commands.CategoryChannelConverter`"

#: ../../ext/commands/commands.rst:411
msgid ":class:`~ext.commands.RoleConverter`"
msgstr ":class:`~ext.commands.RoleConverter`"

#: ../../ext/commands/commands.rst:413
msgid ":class:`~ext.commands.InviteConverter`"
msgstr ":class:`~ext.commands.InviteConverter`"

#: ../../ext/commands/commands.rst:415
msgid ":class:`~ext.commands.GameConverter`"
msgstr ":class:`~ext.commands.GameConverter`"

#: ../../ext/commands/commands.rst:417
msgid ":class:`~ext.commands.EmojiConverter`"
msgstr ":class:`~ext.commands.EmojiConverter`"

#: ../../ext/commands/commands.rst:419
msgid ":class:`~ext.commands.PartialEmojiConverter`"
msgstr ":class:`~ext.commands.PartialEmojiConverter`"

#: ../../ext/commands/commands.rst:421
msgid ":class:`~ext.commands.ColourConverter`"
msgstr ":class:`~ext.commands.ColourConverter`"

#: ../../ext/commands/commands.rst:424
msgid ""
"By providing the converter it allows us to use them as building blocks "
"for another converter:"
msgstr ""

#: ../../ext/commands/commands.rst:441
msgid "Special Converters"
msgstr "특별한 변환기"

#: ../../ext/commands/commands.rst:443
msgid ""
"The command extension also has support for certain converters to allow "
"for more advanced and intricate use cases that go beyond the generic "
"linear parsing. These converters allow you to introduce some more relaxed"
" and dynamic grammar to your commands in an easy to use manner."
msgstr ""

#: ../../ext/commands/commands.rst:448
msgid "typing.Union"
msgstr ""

#: ../../ext/commands/commands.rst:450
msgid ""
"A :data:`typing.Union` is a special type hint that allows for the command"
" to take in any of the specific types instead of a singular type. For "
"example, given the following:"
msgstr ""

#: ../../ext/commands/commands.rst:462
msgid ""
"The ``what`` parameter would either take a :class:`discord.TextChannel` "
"converter or a :class:`discord.Member` converter. The way this works is "
"through a left-to-right order. It first attempts to convert the input to "
"a :class:`discord.TextChannel`, and if it fails it tries to convert it to"
" a :class:`discord.Member`. If all converters fail, then a special error "
"is raised, :exc:`~ext.commands.BadUnionArgument`."
msgstr ""

#: ../../ext/commands/commands.rst:467
msgid ""
"Note that any valid converter discussed above can be passed in to the "
"argument list of a :data:`typing.Union`."
msgstr ""

#: ../../ext/commands/commands.rst:470
msgid "typing.Optional"
msgstr ""

#: ../../ext/commands/commands.rst:472
msgid ""
"A :data:`typing.Optional` is a special type hint that allows for \"back-"
"referencing\" behaviour. If the converter fails to parse into the "
"specified type, the parser will skip the parameter and then either "
"``None`` or the specified default will be passed into the parameter "
"instead. The parser will then continue on to the next parameters and "
"converters, if any."
msgstr ""

#: ../../ext/commands/commands.rst:476 ../../ext/commands/commands.rst:503
msgid "Consider the following example:"
msgstr ""

#: ../../ext/commands/commands.rst:489
msgid ""
"In this example, since the argument could not be converted into an "
"``int``, the default of ``99`` is passed and the parser resumes handling,"
" which in this case would be to pass it into the ``liquid`` parameter."
msgstr ""

#: ../../ext/commands/commands.rst:494
msgid ""
"This converter only works in regular positional parameters, not variable "
"parameters or keyword-only parameters."
msgstr ""

#: ../../ext/commands/commands.rst:497
msgid "Greedy"
msgstr ""

#: ../../ext/commands/commands.rst:499
msgid ""
"The :data:`~ext.commands.Greedy` converter is a generalisation of the "
":data:`typing.Optional` converter, except applied to a list of arguments."
" In simple terms, this means that it tries to convert as much as it can "
"until it can't convert any further."
msgstr ""

#: ../../ext/commands/commands.rst:512
msgid "When invoked, it allows for any number of members to be passed in:"
msgstr ""

#: ../../ext/commands/commands.rst:516
msgid ""
"The type passed when using this converter depends on the parameter type "
"that it is being attached to:"
msgstr ""

#: ../../ext/commands/commands.rst:518
msgid ""
"Positional parameter types will receive either the default parameter or a"
" :class:`list` of the converted values."
msgstr ""

#: ../../ext/commands/commands.rst:519
msgid "Variable parameter types will be a :class:`tuple` as usual."
msgstr ""

#: ../../ext/commands/commands.rst:520
msgid ""
"Keyword-only parameter types will be the same as if "
":data:`~ext.commands.Greedy` was not passed at all."
msgstr ""

#: ../../ext/commands/commands.rst:522
msgid ""
":data:`~ext.commands.Greedy` parameters can also be made optional by "
"specifying an optional value."
msgstr ""

#: ../../ext/commands/commands.rst:524
msgid ""
"When mixed with the :data:`typing.Optional` converter you can provide "
"simple and expressive command invocation syntaxes:"
msgstr ""

#: ../../ext/commands/commands.rst:539
msgid "This command can be invoked any of the following ways:"
msgstr ""

#: ../../ext/commands/commands.rst:549
msgid ""
"The usage of :data:`~ext.commands.Greedy` and :data:`typing.Optional` are"
" powerful and useful, however as a price, they open you up to some "
"parsing ambiguities that might surprise some people."
msgstr ""

#: ../../ext/commands/commands.rst:552
msgid ""
"For example, a signature expecting a :data:`typing.Optional` of a "
":class:`discord.Member` followed by a :class:`int` could catch a member "
"named after a number due to the different ways a "
":class:`~ext.commands.MemberConverter` decides to fetch members. You "
"should take care to not introduce unintended parsing ambiguities in your "
"code. One technique would be to clamp down the expected syntaxes allowed "
"through custom converters or reordering the parameters to minimise "
"clashes."
msgstr ""

#: ../../ext/commands/commands.rst:558
msgid ""
"To help aid with some parsing ambiguities, :class:`str`, ``None``, "
":data:`typing.Optional` and :data:`~ext.commands.Greedy` are forbidden as"
" parameters for the :data:`~ext.commands.Greedy` converter."
msgstr ""

#: ../../ext/commands/commands.rst:564
msgid "Error Handling"
msgstr "에러 다루기"

#: ../../ext/commands/commands.rst:566
msgid ""
"When our commands fail to parse we will, by default, receive a noisy "
"error in ``stderr`` of our console that tells us that an error has "
"happened and has been silently ignored."
msgstr ""

#: ../../ext/commands/commands.rst:569
msgid ""
"In order to handle our errors, we must use something called an error "
"handler. There is a global error handler, called :func:`on_command_error`"
" which works like any other event in the :ref:`discord-api-events`. This "
"global error handler is called for every error reached."
msgstr ""

#: ../../ext/commands/commands.rst:573
msgid ""
"Most of the time however, we want to handle an error local to the command"
" itself. Luckily, commands come with local error handlers that allow us "
"to do just that. First we decorate an error handler function with "
":meth:`.Command.error`:"
msgstr ""

#: ../../ext/commands/commands.rst:589
msgid ""
"The first parameter of the error handler is the :class:`.Context` while "
"the second one is an exception that is derived from "
":exc:`~ext.commands.CommandError`. A list of errors is found in the "
":ref:`ext_commands_api_errors` page of the documentation."
msgstr ""

#: ../../ext/commands/commands.rst:593
msgid "Checks"
msgstr "체크"

#: ../../ext/commands/commands.rst:595
msgid ""
"There are cases when we don't want a user to use our commands. They don't"
" have permissions to do so or maybe we blocked them from using our bot "
"earlier. The commands extension comes with full support for these things "
"in a concept called a :ref:`ext_commands_api_checks`."
msgstr ""
"우리가 유저들이 전용 명령어를 사용하지 못하게 막고 싶을 때가 있습니다. 그들에게 권한이 없거나 우리가 그들이 봇을 사용하지 "
"못하도록 막았었을 수도 있습니다. 명령어 확장자는 이것들을 위한 완전한 지원이 "
":ref:`ext_commands_api_checks`\\로 함께 옵니다."

#: ../../ext/commands/commands.rst:599
msgid ""
"A check is a basic predicate that can take in a :class:`.Context` as its "
"sole parameter. Within it, you have the following options:"
msgstr ""
"체크는 :class:`.Context`\\에서 단독 매개 변수로 자리잡는 기본적인 서술자입니다. 이 안에서, 당신에게는 이런 "
"옵션들이 있습니다:"

#: ../../ext/commands/commands.rst:602
msgid "Return ``True`` to signal that the person can run the command."
msgstr "이 사람이 명령어를 사용할 수 있다고 ``True``\\를 시그널에 반환."

#: ../../ext/commands/commands.rst:603
msgid "Return ``False`` to signal that the person cannot run the command."
msgstr "이 사람이 명령어를 사용할 수 없다고 ``False``\\를 시그널에 반환."

#: ../../ext/commands/commands.rst:604
msgid ""
"Raise a :exc:`~ext.commands.CommandError` derived exception to signal the"
" person cannot run the command."
msgstr "이 사람이 명령어를 사용할 수 없다고 :exc:`~ext.commands.CommandError` 예외를 일으키기."

#: ../../ext/commands/commands.rst:606
msgid ""
"This allows you to have custom error messages for you to handle in the "
":ref:`error handlers <ext_commands_error_handler>`."
msgstr ""
"이는 당신이 :ref:`error handlers <ext_commands_error_handler>`\\를 다루기 위해 당신만을 "
"위한 커스텀 오류 메시지를 만들 수 있게 합니다."

#: ../../ext/commands/commands.rst:609
msgid ""
"To register a check for a command, we would have two ways of doing so. "
"The first is using the :meth:`~ext.commands.check` decorator. For "
"example:"
msgstr ""
"명령어에 체크를 등록하기 위해, 우리는 2가지 방법으로 할 수 있습니다. 첫번째 방법은 "
":meth:`~ext.commands.check` 데코레이터를 사용하는 것입니다. 예를 들어:"

#: ../../ext/commands/commands.rst:623
msgid ""
"This would only evaluate the command if the function ``is_owner`` returns"
" ``True``. Sometimes we re-use a check often and want to split it into "
"its own decorator. To do that we can just add another level of depth:"
msgstr ""

#: ../../ext/commands/commands.rst:640
msgid ""
"Since an owner check is so common, the library provides it for you "
"(:func:`~ext.commands.is_owner`):"
msgstr ""

#: ../../ext/commands/commands.rst:650
msgid "When multiple checks are specified, **all** of them must be ``True``:"
msgstr ""

#: ../../ext/commands/commands.rst:666
msgid ""
"If any of those checks fail in the example above, then the command will "
"not be run."
msgstr ""

#: ../../ext/commands/commands.rst:668
msgid ""
"When an error happens, the error is propagated to the :ref:`error "
"handlers <ext_commands_error_handler>`. If you do not raise a custom "
":exc:`~ext.commands.CommandError` derived exception, then it will get "
"wrapped up into a :exc:`~ext.commands.CheckFailure` exception as so:"
msgstr ""

#: ../../ext/commands/commands.rst:686
msgid ""
"If you want a more robust error system, you can derive from the exception"
" and raise it instead of returning ``False``:"
msgstr ""

#: ../../ext/commands/commands.rst:711
msgid ""
"Since having a ``guild_only`` decorator is pretty common, it comes built-"
"in via :func:`~ext.commands.guild_only`."
msgstr ""

#: ../../ext/commands/commands.rst:714
msgid "Global Checks"
msgstr "글로벌 체크"

#: ../../ext/commands/commands.rst:716
msgid ""
"Sometimes we want to apply a check to **every** command, not just certain"
" commands. The library supports this as well using the global check "
"concept."
msgstr ""
"가끔 우리는 특정 명령어 말고 **모든** 명령어에 체크를 적용하고 싶을때가 있습니다. 이 라이브러리는 글로벌 체크를 통해 이 "
"기능을 지원합니다."

#: ../../ext/commands/commands.rst:719
#, fuzzy
msgid ""
"Global checks work similarly to regular checks except they are registered"
" with the :meth:`.Bot.check` decorator."
msgstr "글로벌 체크는 :func:`.Bot.check` 데코레이터와 함께 등록된다는 것을 제외하면 기본 체크들과 동일하게 작동합니다."

#: ../../ext/commands/commands.rst:721
msgid "For example, to block all DMs we could do the following:"
msgstr "예를 들면, 모든 DM을 막기 위해 이렇게 할 수도 있습니다:"

#: ../../ext/commands/commands.rst:731
msgid ""
"Be careful on how you write your global checks, as it could also lock you"
" out of your own bot."
msgstr "당신이 당신의 봇을 사용 못하도록 만들 수도 있기 때문에 글로벌 체크를 작성할 때는 조심하세요."

#~ msgid ""
#~ "To help aid with some parsing "
#~ "ambiguities, :class:`str`, ``None`` and "
#~ ":data:`~ext.commands.Greedy` are forbidden as "
#~ "parameters for the :data:`~ext.commands.Greedy` "
#~ "converter."
#~ msgstr ""

