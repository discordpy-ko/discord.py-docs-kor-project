# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2020, Rapptz
# This file is distributed under the same license as the discord.py package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: discord.py 1.4.0a\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-12-19 16:11+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../ext/commands/api.rst:4
msgid "API Reference"
msgstr ""

#: ../../ext/commands/api.rst:6
msgid ""
"The following section outlines the API of discord.py's command extension "
"module."
msgstr "이 섹션에서는 discord.py의 명령어 확장 모듈에 대해 설명합니다."

#: ../../ext/commands/api.rst:11
msgid "Bots"
msgstr ""

#: ../../ext/commands/api.rst:14
msgid "Bot"
msgstr "봇"

#: discord.ext.commands.Bot:1 of
msgid "Represents a discord bot."
msgstr "디스코드 봇을 나타냅니다."

#: discord.ext.commands.Bot:3 of
msgid ""
"This class is a subclass of :class:`discord.Client` and as a result "
"anything that you can do with a :class:`discord.Client` you can do with "
"this bot."
msgstr ""
"이 클래스는 :class:`discord.Client` 의 서브클래스이며 결과적으로 :class:`discord.Client` 로 "
"할 수 있는 모든 작업을 이 봇으로 할 수 있습니다."

#: discord.ext.commands.Bot:7 of
msgid ""
"This class also subclasses :class:`.GroupMixin` to provide the "
"functionality to manage commands."
msgstr "또한 이 클래스는 커맨드를 관리하는 기능을 제공하기 위해 :class:`.GroupMixin` 를 서브클래스로 갖습니다."

#: discord.ext.commands.Bot:12 of
msgid ""
"The command prefix is what the message content must contain initially to "
"have a command invoked. This prefix could either be a string to indicate "
"what the prefix should be, or a callable that takes in the bot as its "
"first parameter and :class:`discord.Message` as its second parameter and "
"returns the prefix. This is to facilitate \"dynamic\" command prefixes. "
"This callable can be either a regular function or a coroutine."
msgstr ""
"명령어 접두어는 커맨드를 실행하기 위해 메시지의 첫부분에 있어야 하는 내용입니다.이는 접두어를 나타내는 문자열이거나, 봇을 첫 "
"매개변수로 가지고 두 번째 매개변수를 :class:`discord.Message` 로 가지는 콜러블이여야 합니다. 이는 명령어 "
"접두사를 \"동적\"으로 설정할 수 있게 합니다. 이 콜러블은 일반 함수이거나 코루틴일 수 있습니다."

#: discord.ext.commands.Bot:20 of
msgid ""
"An empty string as the prefix always matches, enabling prefix-less "
"command invocation. While this may be useful in DMs it should be avoided "
"in servers, as it's likely to cause performance issues and unintended "
"command invocations."
msgstr ""
"접두어가 항상 일치하는 빈 문자열은 접두어 없는 명령 호출을 가능하게 합니다. DM에서는 유용할 수 있지만 성능 문제와 의도하지 "
"않은 명령어의 호출이 발생할 수 있으므로 서버에서는 피해야 합니다."

#: discord.ext.commands.Bot:25 of
msgid ""
"The command prefix could also be an iterable of strings indicating that "
"multiple checks for the prefix should be used and the first one to match "
"will be the invocation prefix. You can get this prefix via "
":attr:`.Context.prefix`. To avoid confusion empty iterables are not "
"allowed."
msgstr ""
"명령어 접두어는 또한 접두사에 대한 여러 검사를 사용해야 할 경우 처음으로 일치하는 항목이 호출 접두사임을 나타내는, 문자열들의 "
"반복 가능 객체일 수 있습니다. 이때 접두사는 :attr:`.Context.prefix` 를 통해 얻을 수 있습니다. 혼동을 피하기"
" 위해 빈 반복 가능 객체는 허용되지 않습니다."

#: discord.ext.commands.Bot:33 of
msgid ""
"When passing multiple prefixes be careful to not pass a prefix that "
"matches a longer prefix occurring later in the sequence.  For example, if"
" the command prefix is ``('!', '!?')``  the ``'!?'`` prefix will never be"
" matched to any message as the previous one matches messages starting "
"with ``!?``. This is especially important when passing an empty string, "
"it should always be last as no prefix after it will be matched."
msgstr ""

#: discord.ext.commands.Bot:43 of
msgid ""
"Whether the commands should be case insensitive. Defaults to ``False``. "
"This attribute does not carry over to groups. You must set it to every "
"group if you require group commands to be case insensitive as well."
msgstr ""

#: discord.ext.commands.BadBoolArgument discord.ext.commands.BadUnionArgument
#: discord.ext.commands.Bot discord.ext.commands.Bot.activity
#: discord.ext.commands.Bot.allowed_mentions
#: discord.ext.commands.Bot.cached_messages discord.ext.commands.Bot.cogs
#: discord.ext.commands.Bot.commands discord.ext.commands.Bot.emojis
#: discord.ext.commands.Bot.extensions discord.ext.commands.Bot.guilds
#: discord.ext.commands.Bot.intents discord.ext.commands.Bot.latency
#: discord.ext.commands.Bot.private_channels discord.ext.commands.Bot.user
#: discord.ext.commands.Bot.users discord.ext.commands.Bot.voice_clients
#: discord.ext.commands.BotMissingAnyRole
#: discord.ext.commands.BotMissingPermissions
#: discord.ext.commands.BotMissingRole discord.ext.commands.ChannelNotFound
#: discord.ext.commands.ChannelNotReadable discord.ext.commands.CheckAnyFailure
#: discord.ext.commands.Cog.description discord.ext.commands.Cog.qualified_name
#: discord.ext.commands.CogMeta discord.ext.commands.Command
#: discord.ext.commands.Command.cog_name
#: discord.ext.commands.Command.full_parent_name
#: discord.ext.commands.Command.parents
#: discord.ext.commands.Command.qualified_name
#: discord.ext.commands.Command.root_parent
#: discord.ext.commands.Command.short_doc
#: discord.ext.commands.Command.signature
#: discord.ext.commands.CommandInvokeError
#: discord.ext.commands.CommandOnCooldown
#: discord.ext.commands.CommandRegistrationError discord.ext.commands.Context
#: discord.ext.commands.Context.cog discord.ext.commands.Context.guild
#: discord.ext.commands.Context.valid discord.ext.commands.Context.voice_client
#: discord.ext.commands.ConversionError discord.ext.commands.DefaultHelpCommand
#: discord.ext.commands.EmojiNotFound
#: discord.ext.commands.ExpectedClosingQuoteError
#: discord.ext.commands.ExtensionError discord.ext.commands.ExtensionFailed
#: discord.ext.commands.ExtensionNotFound discord.ext.commands.Group
#: discord.ext.commands.Group.cog_name discord.ext.commands.Group.commands
#: discord.ext.commands.Group.full_parent_name
#: discord.ext.commands.Group.parents discord.ext.commands.Group.qualified_name
#: discord.ext.commands.Group.root_parent discord.ext.commands.Group.short_doc
#: discord.ext.commands.Group.signature discord.ext.commands.GroupMixin
#: discord.ext.commands.GroupMixin.commands discord.ext.commands.HelpCommand
#: discord.ext.commands.HelpCommand.clean_prefix
#: discord.ext.commands.InvalidEndOfQuotedStringError
#: discord.ext.commands.MaxConcurrencyReached
#: discord.ext.commands.MemberNotFound discord.ext.commands.MessageNotFound
#: discord.ext.commands.MinimalHelpCommand discord.ext.commands.MissingAnyRole
#: discord.ext.commands.MissingPermissions
#: discord.ext.commands.MissingRequiredArgument
#: discord.ext.commands.MissingRole discord.ext.commands.Paginator
#: discord.ext.commands.Paginator.pages
#: discord.ext.commands.PartialEmojiConversionFailure
#: discord.ext.commands.RoleNotFound discord.ext.commands.UnexpectedQuoteError
#: discord.ext.commands.UserNotFound discord.ext.commands.clean_content of
msgid "type"
msgstr "타입"

#: discord.ext.commands.Bot:47 discord.ext.commands.Bot:61
#: discord.ext.commands.Bot.is_owner:17 discord.ext.commands.Command:49
#: discord.ext.commands.Command:86 discord.ext.commands.Command:97
#: discord.ext.commands.Command:112 discord.ext.commands.Command:121
#: discord.ext.commands.Command:129 discord.ext.commands.Command.can_run:16
#: discord.ext.commands.Command.is_on_cooldown:7
#: discord.ext.commands.CommandRegistrationError:18
#: discord.ext.commands.Context:77 discord.ext.commands.Context.valid:3
#: discord.ext.commands.DefaultHelpCommand:18 discord.ext.commands.Group:18
#: discord.ext.commands.Group:25 discord.ext.commands.Group.can_run:16
#: discord.ext.commands.Group.is_on_cooldown:7
#: discord.ext.commands.GroupMixin:15 discord.ext.commands.HelpCommand:24
#: discord.ext.commands.HelpCommand:31
#: discord.ext.commands.MinimalHelpCommand:9
#: discord.ext.commands.clean_content:10 discord.ext.commands.clean_content:16
#: discord.ext.commands.clean_content:22 of
msgid ":class:`bool`"
msgstr ""

#: discord.ext.commands.Bot:51 of
msgid "The content prefixed into the default help message."
msgstr ""

#: discord.ext.commands.BadBoolArgument:11 discord.ext.commands.Bot:53
#: discord.ext.commands.ChannelNotFound:11
#: discord.ext.commands.Cog.description:3
#: discord.ext.commands.Cog.qualified_name:3 discord.ext.commands.CogMeta:37
#: discord.ext.commands.CogMeta:45 discord.ext.commands.Command:10
#: discord.ext.commands.Command:22 discord.ext.commands.Command:34
#: discord.ext.commands.Command:79
#: discord.ext.commands.Command.full_parent_name:6
#: discord.ext.commands.Command.qualified_name:7
#: discord.ext.commands.Command.short_doc:7
#: discord.ext.commands.Command.signature:3
#: discord.ext.commands.CommandRegistrationError:12
#: discord.ext.commands.Context:41 discord.ext.commands.Context:54
#: discord.ext.commands.DefaultHelpCommand:49
#: discord.ext.commands.DefaultHelpCommand:56
#: discord.ext.commands.EmojiNotFound:11
#: discord.ext.commands.ExpectedClosingQuoteError:9
#: discord.ext.commands.ExtensionError:9 discord.ext.commands.ExtensionFailed:9
#: discord.ext.commands.ExtensionNotFound:12
#: discord.ext.commands.Group.full_parent_name:6
#: discord.ext.commands.Group.qualified_name:7
#: discord.ext.commands.Group.short_doc:7
#: discord.ext.commands.Group.signature:3
#: discord.ext.commands.HelpCommand.clean_prefix:3
#: discord.ext.commands.HelpCommand.command_not_found:13
#: discord.ext.commands.HelpCommand.get_command_signature:7
#: discord.ext.commands.HelpCommand.invoked_with:10
#: discord.ext.commands.HelpCommand.remove_mentions:6
#: discord.ext.commands.HelpCommand.subcommand_not_found:20
#: discord.ext.commands.InvalidEndOfQuotedStringError:10
#: discord.ext.commands.MemberNotFound:12
#: discord.ext.commands.MessageNotFound:11
#: discord.ext.commands.MinimalHelpCommand:16
#: discord.ext.commands.MinimalHelpCommand:23
#: discord.ext.commands.MinimalHelpCommand:48
#: discord.ext.commands.MinimalHelpCommand.get_command_signature:7
#: discord.ext.commands.MinimalHelpCommand.get_ending_note:6
#: discord.ext.commands.MinimalHelpCommand.get_opening_note:9
#: discord.ext.commands.Paginator:13 discord.ext.commands.Paginator:19
#: discord.ext.commands.PartialEmojiConversionFailure:12
#: discord.ext.commands.RoleNotFound:11
#: discord.ext.commands.UnexpectedQuoteError:9
#: discord.ext.commands.UserNotFound:12 of
msgid ":class:`str`"
msgstr ""

#: discord.ext.commands.Bot:57 of
msgid ""
"If ``True``, the bot will only listen to commands invoked by itself "
"rather than ignoring itself. If ``False`` (the default) then the bot will"
" ignore itself. This cannot be changed once initialised."
msgstr ""

#: discord.ext.commands.Bot:65 of
msgid ""
"The help command implementation to use. This can be dynamically set at "
"runtime. To remove the help command pass ``None``. For more information "
"on implementing a help command, see :ref:`ext_commands_help_command`."
msgstr ""

#: discord.ext.commands.Bot:69 of
msgid "Optional[:class:`.HelpCommand`]"
msgstr ""

#: discord.ext.commands.Bot:73 of
msgid ""
"The user ID that owns the bot. If this is not set and is then queried via"
" :meth:`.is_owner` then it is fetched automatically using "
":meth:`~.Bot.application_info`."
msgstr ""

#: discord.ext.commands.Bot:77 discord.ext.commands.DefaultHelpCommand:36
#: discord.ext.commands.MinimalHelpCommand:41 of
msgid "Optional[:class:`int`]"
msgstr ""

#: discord.ext.commands.Bot:81 of
msgid ""
"The user IDs that owns the bot. This is similar to :attr:`owner_id`. If "
"this is not set and the application is team based, then it is fetched "
"automatically using :meth:`~.Bot.application_info`. For performance "
"reasons it is recommended to use a :class:`set` for the collection. You "
"cannot set both ``owner_id`` and ``owner_ids``."
msgstr ""

#: discord.ext.commands.Bot:89 of
msgid "Optional[Collection[:class:`int`]]"
msgstr ""

#: discord.ext.commands.Bot.activity:1 of
msgid "The activity being used upon logging in."
msgstr ""

#: discord.ext.commands.Bot.activity:4 of
msgid "Optional[:class:`.BaseActivity`]"
msgstr ""

#: discord.ext.commands.Bot.add_check:1 of
msgid "Adds a global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.add_check:3 of
msgid ""
"This is the non-decorator interface to :meth:`.check` and "
":meth:`.check_once`."
msgstr ""

#: ../../ext/commands/api.rst discord.ext.commands.Bot.add_check
#: discord.ext.commands.Bot.add_cog discord.ext.commands.Bot.add_command
#: discord.ext.commands.Bot.add_listener discord.ext.commands.Bot.after_invoke
#: discord.ext.commands.Bot.before_identify_hook
#: discord.ext.commands.Bot.before_invoke
#: discord.ext.commands.Bot.change_presence discord.ext.commands.Bot.connect
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.delete_invite
#: discord.ext.commands.Bot.fetch_guild discord.ext.commands.Bot.fetch_guilds
#: discord.ext.commands.Bot.fetch_invite
#: discord.ext.commands.Bot.fetch_template discord.ext.commands.Bot.fetch_user
#: discord.ext.commands.Bot.fetch_user_profile
#: discord.ext.commands.Bot.fetch_widget discord.ext.commands.Bot.get_channel
#: discord.ext.commands.Bot.get_cog discord.ext.commands.Bot.get_command
#: discord.ext.commands.Bot.get_context discord.ext.commands.Bot.get_emoji
#: discord.ext.commands.Bot.get_guild discord.ext.commands.Bot.get_prefix
#: discord.ext.commands.Bot.get_user discord.ext.commands.Bot.invoke
#: discord.ext.commands.Bot.is_owner discord.ext.commands.Bot.load_extension
#: discord.ext.commands.Bot.login discord.ext.commands.Bot.process_commands
#: discord.ext.commands.Bot.reload_extension
#: discord.ext.commands.Bot.remove_check discord.ext.commands.Bot.remove_cog
#: discord.ext.commands.Bot.remove_command
#: discord.ext.commands.Bot.remove_listener
#: discord.ext.commands.Bot.request_offline_members
#: discord.ext.commands.Bot.unload_extension discord.ext.commands.Bot.wait_for
#: discord.ext.commands.CategoryChannelConverter.convert
#: discord.ext.commands.Cog.cog_after_invoke
#: discord.ext.commands.Cog.cog_before_invoke
#: discord.ext.commands.Cog.cog_command_error discord.ext.commands.Cog.listener
#: discord.ext.commands.ColourConverter.convert
#: discord.ext.commands.Command.add_check
#: discord.ext.commands.Command.after_invoke
#: discord.ext.commands.Command.before_invoke
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.error
#: discord.ext.commands.Command.get_cooldown_retry_after
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Command.remove_check
#: discord.ext.commands.Command.reset_cooldown
#: discord.ext.commands.Context.fetch_message
#: discord.ext.commands.Context.history discord.ext.commands.Context.invoke
#: discord.ext.commands.Context.reinvoke discord.ext.commands.Context.send
#: discord.ext.commands.Context.send_help
#: discord.ext.commands.Converter.convert
#: discord.ext.commands.DefaultHelpCommand.add_command_formatting
#: discord.ext.commands.DefaultHelpCommand.add_indented_commands
#: discord.ext.commands.EmojiConverter.convert
#: discord.ext.commands.GameConverter.convert
#: discord.ext.commands.Group.add_check discord.ext.commands.Group.add_command
#: discord.ext.commands.Group.after_invoke
#: discord.ext.commands.Group.before_invoke discord.ext.commands.Group.can_run
#: discord.ext.commands.Group.error discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.get_cooldown_retry_after
#: discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_check
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.Group.reset_cooldown
#: discord.ext.commands.GroupMixin.add_command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpCommand.add_check
#: discord.ext.commands.HelpCommand.command_not_found
#: discord.ext.commands.HelpCommand.filter_commands
#: discord.ext.commands.HelpCommand.get_command_signature
#: discord.ext.commands.HelpCommand.get_max_size
#: discord.ext.commands.HelpCommand.on_help_command_error
#: discord.ext.commands.HelpCommand.prepare_help_command
#: discord.ext.commands.HelpCommand.remove_check
#: discord.ext.commands.HelpCommand.send_bot_help
#: discord.ext.commands.HelpCommand.send_cog_help
#: discord.ext.commands.HelpCommand.send_command_help
#: discord.ext.commands.HelpCommand.send_error_message
#: discord.ext.commands.HelpCommand.send_group_help
#: discord.ext.commands.HelpCommand.subcommand_not_found
#: discord.ext.commands.InviteConverter.convert
#: discord.ext.commands.MemberConverter.convert
#: discord.ext.commands.MessageConverter.convert
#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting
#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting
#: discord.ext.commands.MinimalHelpCommand.add_command_formatting
#: discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting
#: discord.ext.commands.MinimalHelpCommand.get_command_signature
#: discord.ext.commands.NSFWChannelRequired
#: discord.ext.commands.Paginator.add_line
#: discord.ext.commands.PartialEmojiConverter.convert
#: discord.ext.commands.RoleConverter.convert
#: discord.ext.commands.TextChannelConverter.convert
#: discord.ext.commands.UserConverter.convert
#: discord.ext.commands.VoiceChannelConverter.convert
#: discord.ext.commands.check discord.ext.commands.check_any
#: discord.ext.commands.clean_content.convert discord.ext.commands.command
#: discord.ext.commands.cooldown discord.ext.commands.has_any_role
#: discord.ext.commands.has_permissions discord.ext.commands.has_role
#: discord.ext.commands.max_concurrency of
msgid "매개변수"
msgstr ""

#: discord.ext.commands.Bot.add_check:6 of
msgid "The function that was used as a global check."
msgstr ""

#: discord.ext.commands.Bot.add_check:7 of
msgid ""
"If the function should only be called once per :meth:`.Command.invoke` "
"call."
msgstr ""

#: discord.ext.commands.Bot.add_cog:1 of
msgid "Adds a \"cog\" to the bot."
msgstr ""

#: discord.ext.commands.Bot.add_cog:3 of
msgid "A cog is a class that has its own event listeners and commands."
msgstr ""

#: discord.ext.commands.Bot.add_cog:5 of
msgid "The cog to register to the bot."
msgstr ""

#: discord.ext.commands.Bot.add_cog discord.ext.commands.Bot.add_command
#: discord.ext.commands.Bot.after_invoke
#: discord.ext.commands.Bot.application_info
#: discord.ext.commands.Bot.before_invoke
#: discord.ext.commands.Bot.change_presence discord.ext.commands.Bot.connect
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.delete_invite
#: discord.ext.commands.Bot.event discord.ext.commands.Bot.fetch_channel
#: discord.ext.commands.Bot.fetch_guild discord.ext.commands.Bot.fetch_guilds
#: discord.ext.commands.Bot.fetch_invite
#: discord.ext.commands.Bot.fetch_template discord.ext.commands.Bot.fetch_user
#: discord.ext.commands.Bot.fetch_user_profile
#: discord.ext.commands.Bot.fetch_webhook discord.ext.commands.Bot.fetch_widget
#: discord.ext.commands.Bot.listen discord.ext.commands.Bot.load_extension
#: discord.ext.commands.Bot.login discord.ext.commands.Bot.reload_extension
#: discord.ext.commands.Bot.request_offline_members
#: discord.ext.commands.Bot.start discord.ext.commands.Bot.unload_extension
#: discord.ext.commands.Bot.wait_for
#: discord.ext.commands.CategoryChannelConverter.convert
#: discord.ext.commands.Cog.listener
#: discord.ext.commands.ColourConverter.convert
#: discord.ext.commands.Command.after_invoke
#: discord.ext.commands.Command.before_invoke
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.error
#: discord.ext.commands.Context.fetch_message
#: discord.ext.commands.Context.history discord.ext.commands.Context.invoke
#: discord.ext.commands.Context.pins discord.ext.commands.Context.reinvoke
#: discord.ext.commands.Context.reply discord.ext.commands.Context.send
#: discord.ext.commands.Converter.convert
#: discord.ext.commands.EmojiConverter.convert
#: discord.ext.commands.GameConverter.convert
#: discord.ext.commands.Group.add_command
#: discord.ext.commands.Group.after_invoke
#: discord.ext.commands.Group.before_invoke discord.ext.commands.Group.can_run
#: discord.ext.commands.Group.error discord.ext.commands.GroupMixin.add_command
#: discord.ext.commands.InviteConverter.convert
#: discord.ext.commands.MemberConverter.convert
#: discord.ext.commands.MessageConverter.convert
#: discord.ext.commands.Paginator.add_line
#: discord.ext.commands.PartialEmojiConverter.convert
#: discord.ext.commands.RoleConverter.convert
#: discord.ext.commands.TextChannelConverter.convert
#: discord.ext.commands.UserConverter.convert
#: discord.ext.commands.VoiceChannelConverter.convert
#: discord.ext.commands.check_any discord.ext.commands.clean_content.convert
#: discord.ext.commands.command of
msgid "예외"
msgstr ""

#: discord.ext.commands.Bot.add_cog:8 of
msgid "The cog does not inherit from :class:`.Cog`."
msgstr "Cog가 :class:`.Cog`\\에서 상속되지 않았습니다."

#: discord.ext.commands.Bot.add_cog:9 of
msgid "An error happened during loading."
msgstr "로드하는 중 오류가 발생했습니다."

#: discord.ext.commands.Bot.add_command:1
#: discord.ext.commands.Group.add_command:1
#: discord.ext.commands.GroupMixin.add_command:1 of
msgid "Adds a :class:`.Command` into the internal list of commands."
msgstr ""

#: discord.ext.commands.Bot.add_command:3
#: discord.ext.commands.Group.add_command:3
#: discord.ext.commands.GroupMixin.add_command:3 of
msgid ""
"This is usually not called, instead the :meth:`~.GroupMixin.command` or "
":meth:`~.GroupMixin.group` shortcut decorators are used instead."
msgstr ""

#: discord.ext.commands.Bot.add_command:6
#: discord.ext.commands.Group.add_command:6
#: discord.ext.commands.GroupMixin.add_command:6 of
msgid ""
"Raise :exc:`.CommandRegistrationError` instead of generic "
":exc:`.ClientException`"
msgstr ""

#: discord.ext.commands.Bot.add_command:9
#: discord.ext.commands.Group.add_command:9
#: discord.ext.commands.GroupMixin.add_command:9 of
msgid "The command to add."
msgstr "추가할 명령어."

#: discord.ext.commands.Bot.add_command:12
#: discord.ext.commands.Group.add_command:12
#: discord.ext.commands.GroupMixin.add_command:12 of
msgid "If the command or its alias is already registered by different command."
msgstr ""

#: discord.ext.commands.Bot.add_command:13
#: discord.ext.commands.Group.add_command:13
#: discord.ext.commands.GroupMixin.add_command:13 of
msgid "If the command passed is not a subclass of :class:`.Command`."
msgstr ""

#: discord.ext.commands.Bot.add_listener:1 of
msgid "The non decorator alternative to :meth:`.listen`."
msgstr ""

#: discord.ext.commands.Bot.add_listener:3 of
msgid "The function to call."
msgstr ""

#: discord.ext.commands.Bot.add_listener:5 of
msgid "The name of the event to listen for. Defaults to ``func.__name__``."
msgstr ""

#: discord.ext.commands.Bot.add_listener:9
#: discord.ext.commands.Bot.change_presence:6 discord.ext.commands.Bot.check:16
#: discord.ext.commands.Bot.check_once:26 discord.ext.commands.Bot.event:8
#: discord.ext.commands.Bot.fetch_guilds:15 discord.ext.commands.Bot.listen:8
#: discord.ext.commands.Bot.wait_for:22 discord.ext.commands.Context.history:6
#: discord.ext.commands.before_invoke:9 discord.ext.commands.check:37
#: discord.ext.commands.check_any:20 discord.ext.commands.has_any_role:20
#: discord.ext.commands.has_permissions:16
#: discord.ext.commands.when_mentioned_or:6 of
msgid "예제"
msgstr ""

#: discord.ext.commands.Bot.after_invoke:1
#: discord.ext.commands.Command.after_invoke:1
#: discord.ext.commands.Group.after_invoke:1
#: discord.ext.commands.after_invoke:1 of
msgid "A decorator that registers a coroutine as a post-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:3
#: discord.ext.commands.Command.after_invoke:3
#: discord.ext.commands.Group.after_invoke:3 of
msgid ""
"A post-invoke hook is called directly after the command is called. This "
"makes it a useful function to clean-up database connections or any type "
"of clean up required."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:7
#: discord.ext.commands.Command.after_invoke:7
#: discord.ext.commands.Group.after_invoke:7 of
msgid "This post-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:11 of
msgid ""
"Similar to :meth:`~.Bot.before_invoke`\\, this is not called unless "
"checks and argument parsing procedures succeed. This hook is, however, "
"**always** called regardless of the internal command callback raising an "
"error (i.e. :exc:`.CommandInvokeError`\\). This makes it ideal for clean-"
"up scenarios."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:17
#: discord.ext.commands.Command.after_invoke:11
#: discord.ext.commands.Group.after_invoke:11 of
msgid "The coroutine to register as the post-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.after_invoke:20
#: discord.ext.commands.Bot.before_invoke:19 discord.ext.commands.Bot.event:15
#: discord.ext.commands.Command.after_invoke:14
#: discord.ext.commands.Command.before_invoke:14
#: discord.ext.commands.Command.error:10
#: discord.ext.commands.Group.after_invoke:14
#: discord.ext.commands.Group.before_invoke:14
#: discord.ext.commands.Group.error:10 of
msgid "The coroutine passed is not actually a coroutine."
msgstr "전달된 코루틴이 사실 코루틴이 아닙니다."

#: discord.ext.commands.Bot.allowed_mentions:1 of
msgid "The allowed mention configuration."
msgstr "허용된 맨션 설정."

#: discord.ext.commands.Bot.allowed_mentions:5 of
msgid "Optional[:class:`~discord.AllowedMentions`]"
msgstr ""

#: discord.ext.commands.Bot.application_info:1
#: discord.ext.commands.Bot.before_identify_hook:1
#: discord.ext.commands.Bot.change_presence:1
#: discord.ext.commands.Bot.connect:1 discord.ext.commands.Bot.create_guild:1
#: discord.ext.commands.Bot.delete_invite:1
#: discord.ext.commands.Bot.fetch_channel:1
#: discord.ext.commands.Bot.fetch_guild:1
#: discord.ext.commands.Bot.fetch_guilds:1
#: discord.ext.commands.Bot.fetch_invite:1
#: discord.ext.commands.Bot.fetch_template:1
#: discord.ext.commands.Bot.fetch_user:1
#: discord.ext.commands.Bot.fetch_user_profile:1
#: discord.ext.commands.Bot.fetch_webhook:1
#: discord.ext.commands.Bot.fetch_widget:1
#: discord.ext.commands.Bot.get_context:1 discord.ext.commands.Bot.get_prefix:1
#: discord.ext.commands.Bot.invoke:1 discord.ext.commands.Bot.is_owner:1
#: discord.ext.commands.Bot.login:1 discord.ext.commands.Bot.logout:1
#: discord.ext.commands.Bot.on_command_error:1
#: discord.ext.commands.Bot.on_error:1
#: discord.ext.commands.Bot.process_commands:1
#: discord.ext.commands.Bot.request_offline_members:1
#: discord.ext.commands.Bot.start:1 discord.ext.commands.Bot.wait_for:1
#: discord.ext.commands.Bot.wait_until_ready:1
#: discord.ext.commands.CategoryChannelConverter.convert:1
#: discord.ext.commands.ColourConverter.convert:1
#: discord.ext.commands.Command.__call__:1
#: discord.ext.commands.Command.can_run:1
#: discord.ext.commands.Context.fetch_message:1
#: discord.ext.commands.Context.invoke:1 discord.ext.commands.Context.pins:1
#: discord.ext.commands.Context.reinvoke:1 discord.ext.commands.Context.reply:1
#: discord.ext.commands.Context.send:1 discord.ext.commands.Context.send_help:1
#: discord.ext.commands.Context.trigger_typing:1
#: discord.ext.commands.Converter.convert:1
#: discord.ext.commands.EmojiConverter.convert:1
#: discord.ext.commands.GameConverter.convert:1
#: discord.ext.commands.Group.can_run:1
#: discord.ext.commands.HelpCommand.command_callback:1
#: discord.ext.commands.HelpCommand.filter_commands:1
#: discord.ext.commands.HelpCommand.on_help_command_error:1
#: discord.ext.commands.HelpCommand.prepare_help_command:1
#: discord.ext.commands.HelpCommand.send_bot_help:1
#: discord.ext.commands.HelpCommand.send_cog_help:1
#: discord.ext.commands.HelpCommand.send_command_help:1
#: discord.ext.commands.HelpCommand.send_error_message:1
#: discord.ext.commands.HelpCommand.send_group_help:1
#: discord.ext.commands.InviteConverter.convert:1
#: discord.ext.commands.MemberConverter.convert:1
#: discord.ext.commands.MessageConverter.convert:1
#: discord.ext.commands.PartialEmojiConverter.convert:1
#: discord.ext.commands.RoleConverter.convert:1
#: discord.ext.commands.TextChannelConverter.convert:1
#: discord.ext.commands.UserConverter.convert:1
#: discord.ext.commands.VoiceChannelConverter.convert:1
#: discord.ext.commands.clean_content.convert:1 of
msgid "|coro|"
msgstr ""

#: discord.ext.commands.Bot.application_info:3 of
msgid "Retrieves the bot's application information."
msgstr ""

#: discord.ext.commands.Bot.application_info:5 of
msgid "Retrieving the information failed somehow."
msgstr ""

#: discord.ext.commands.Bot.application_info discord.ext.commands.Bot.command
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.fetch_channel
#: discord.ext.commands.Bot.fetch_guild discord.ext.commands.Bot.fetch_invite
#: discord.ext.commands.Bot.fetch_template discord.ext.commands.Bot.fetch_user
#: discord.ext.commands.Bot.fetch_user_profile
#: discord.ext.commands.Bot.fetch_webhook discord.ext.commands.Bot.fetch_widget
#: discord.ext.commands.Bot.get_channel discord.ext.commands.Bot.get_cog
#: discord.ext.commands.Bot.get_command discord.ext.commands.Bot.get_context
#: discord.ext.commands.Bot.get_emoji discord.ext.commands.Bot.get_guild
#: discord.ext.commands.Bot.get_prefix discord.ext.commands.Bot.get_user
#: discord.ext.commands.Bot.group discord.ext.commands.Bot.is_owner
#: discord.ext.commands.Bot.remove_command discord.ext.commands.Bot.wait_for
#: discord.ext.commands.Cog.get_commands discord.ext.commands.Cog.get_listeners
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.copy
#: discord.ext.commands.Command.get_cooldown_retry_after
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Context.fetch_message discord.ext.commands.Context.pins
#: discord.ext.commands.Context.reply discord.ext.commands.Context.send
#: discord.ext.commands.Context.send_help
#: discord.ext.commands.DefaultHelpCommand.get_destination
#: discord.ext.commands.Group.can_run discord.ext.commands.Group.command
#: discord.ext.commands.Group.copy discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.get_cooldown_retry_after
#: discord.ext.commands.Group.group discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.GroupMixin.command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.group
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpCommand.cog
#: discord.ext.commands.HelpCommand.command_not_found
#: discord.ext.commands.HelpCommand.filter_commands
#: discord.ext.commands.HelpCommand.get_command_signature
#: discord.ext.commands.HelpCommand.get_destination
#: discord.ext.commands.HelpCommand.get_max_size
#: discord.ext.commands.HelpCommand.invoked_with
#: discord.ext.commands.HelpCommand.remove_mentions
#: discord.ext.commands.HelpCommand.subcommand_not_found
#: discord.ext.commands.MinimalHelpCommand.get_command_signature
#: discord.ext.commands.MinimalHelpCommand.get_destination
#: discord.ext.commands.MinimalHelpCommand.get_ending_note
#: discord.ext.commands.MinimalHelpCommand.get_opening_note of
msgid "반환값"
msgstr ""

#: discord.ext.commands.Bot.application_info:7 of
msgid "The bot's application information."
msgstr ""

#: discord.ext.commands.Bot.application_info discord.ext.commands.Bot.command
#: discord.ext.commands.Bot.create_guild discord.ext.commands.Bot.fetch_channel
#: discord.ext.commands.Bot.fetch_guild discord.ext.commands.Bot.fetch_invite
#: discord.ext.commands.Bot.fetch_template discord.ext.commands.Bot.fetch_user
#: discord.ext.commands.Bot.fetch_user_profile
#: discord.ext.commands.Bot.fetch_webhook discord.ext.commands.Bot.fetch_widget
#: discord.ext.commands.Bot.get_channel discord.ext.commands.Bot.get_cog
#: discord.ext.commands.Bot.get_command discord.ext.commands.Bot.get_context
#: discord.ext.commands.Bot.get_emoji discord.ext.commands.Bot.get_guild
#: discord.ext.commands.Bot.get_prefix discord.ext.commands.Bot.get_user
#: discord.ext.commands.Bot.group discord.ext.commands.Bot.is_owner
#: discord.ext.commands.Bot.remove_command discord.ext.commands.Bot.wait_for
#: discord.ext.commands.Cog.get_commands discord.ext.commands.Cog.get_listeners
#: discord.ext.commands.Command.can_run discord.ext.commands.Command.copy
#: discord.ext.commands.Command.get_cooldown_retry_after
#: discord.ext.commands.Command.is_on_cooldown
#: discord.ext.commands.Context.fetch_message discord.ext.commands.Context.pins
#: discord.ext.commands.Context.reply discord.ext.commands.Context.send
#: discord.ext.commands.Context.send_help
#: discord.ext.commands.DefaultHelpCommand.get_destination
#: discord.ext.commands.Group.can_run discord.ext.commands.Group.command
#: discord.ext.commands.Group.copy discord.ext.commands.Group.get_command
#: discord.ext.commands.Group.get_cooldown_retry_after
#: discord.ext.commands.Group.group discord.ext.commands.Group.is_on_cooldown
#: discord.ext.commands.Group.remove_command
#: discord.ext.commands.GroupMixin.command
#: discord.ext.commands.GroupMixin.get_command
#: discord.ext.commands.GroupMixin.group
#: discord.ext.commands.GroupMixin.remove_command
#: discord.ext.commands.HelpCommand.cog
#: discord.ext.commands.HelpCommand.command_not_found
#: discord.ext.commands.HelpCommand.filter_commands
#: discord.ext.commands.HelpCommand.get_command_signature
#: discord.ext.commands.HelpCommand.get_destination
#: discord.ext.commands.HelpCommand.get_max_size
#: discord.ext.commands.HelpCommand.invoked_with
#: discord.ext.commands.HelpCommand.remove_mentions
#: discord.ext.commands.HelpCommand.subcommand_not_found
#: discord.ext.commands.MinimalHelpCommand.get_command_signature
#: discord.ext.commands.MinimalHelpCommand.get_destination
#: discord.ext.commands.MinimalHelpCommand.get_ending_note
#: discord.ext.commands.MinimalHelpCommand.get_opening_note of
msgid "반환 형식"
msgstr ""

#: discord.ext.commands.Bot.application_info:8 of
msgid ":class:`.AppInfo`"
msgstr ""

#: discord.ext.commands.Bot.before_identify_hook:3 of
msgid ""
"A hook that is called before IDENTIFYing a session. This is useful if you"
" wish to have more control over the synchronization of multiple "
"IDENTIFYing clients."
msgstr ""

#: discord.ext.commands.Bot.before_identify_hook:7 of
msgid "The default implementation sleeps for 5 seconds."
msgstr ""

#: discord.ext.commands.Bot.before_identify_hook:11 of
msgid "The shard ID that requested being IDENTIFY'd"
msgstr ""

#: discord.ext.commands.Bot.before_identify_hook:13 of
msgid "Whether this IDENTIFY is the first initial IDENTIFY."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:1
#: discord.ext.commands.Command.before_invoke:1
#: discord.ext.commands.Group.before_invoke:1
#: discord.ext.commands.before_invoke:1 of
msgid "A decorator that registers a coroutine as a pre-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:3
#: discord.ext.commands.Command.before_invoke:3
#: discord.ext.commands.Group.before_invoke:3 of
msgid ""
"A pre-invoke hook is called directly before the command is called. This "
"makes it a useful function to set up database connections or any type of "
"set up required."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:7
#: discord.ext.commands.Command.before_invoke:7
#: discord.ext.commands.Group.before_invoke:7 of
msgid "This pre-invoke hook takes a sole parameter, a :class:`.Context`."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:11 of
msgid ""
"The :meth:`~.Bot.before_invoke` and :meth:`~.Bot.after_invoke` hooks are "
"only called if all checks and argument parsing procedures pass without "
"error. If any check or argument parsing procedures fail then the hooks "
"are not called."
msgstr ""

#: discord.ext.commands.Bot.before_invoke:16
#: discord.ext.commands.Command.before_invoke:11
#: discord.ext.commands.Group.before_invoke:11 of
msgid "The coroutine to register as the pre-invoke hook."
msgstr ""

#: discord.ext.commands.Bot.cached_messages:1 of
msgid "Read-only list of messages the connected client has cached."
msgstr ""

#: discord.ext.commands.Bot.cached_messages:5 of
msgid "Sequence[:class:`.Message`]"
msgstr ""

#: discord.ext.commands.Bot.change_presence:3 of
msgid "Changes the client's presence."
msgstr ""

#: discord.ext.commands.Bot.change_presence:12 of
msgid "The activity being done. ``None`` if no currently active activity is done."
msgstr ""

#: discord.ext.commands.Bot.change_presence:14 of
msgid ""
"Indicates what status to change to. If ``None``, then "
":attr:`.Status.online` is used."
msgstr ""

#: discord.ext.commands.Bot.change_presence:17 of
msgid ""
"Indicates if you are going AFK. This allows the discord client to know "
"how to handle push notifications better for you in case you are actually "
"idle and not lying."
msgstr ""

#: discord.ext.commands.Bot.change_presence:22 of
msgid "If the ``activity`` parameter is not the proper type."
msgstr ""

#: discord.ext.commands.Bot.check:1 of
msgid "A decorator that adds a global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.check:3 of
msgid ""
"A global check is similar to a :func:`.check` that is applied on a per "
"command basis except it is run before any command checks have been "
"verified and applies to every command the bot has."
msgstr ""

#: discord.ext.commands.Bot.check:9 discord.ext.commands.Bot.check_once:19 of
msgid "This function can either be a regular function or a coroutine."
msgstr ""

#: discord.ext.commands.Bot.check:11 discord.ext.commands.Bot.check_once:21 of
msgid ""
"Similar to a command :func:`.check`\\, this takes a single parameter of "
"type :class:`.Context` and can only raise exceptions inherited from "
":exc:`.CommandError`."
msgstr ""

#: discord.ext.commands.Bot.check_once:1 of
msgid "A decorator that adds a \"call once\" global check to the bot."
msgstr ""

#: discord.ext.commands.Bot.check_once:3 of
msgid ""
"Unlike regular global checks, this one is called only once per "
":meth:`.Command.invoke` call."
msgstr ""

#: discord.ext.commands.Bot.check_once:6 of
msgid ""
"Regular global checks are called whenever a command is called or "
":meth:`.Command.can_run` is called. This type of check bypasses that and "
"ensures that it's called only once, even inside the default help command."
msgstr ""

#: discord.ext.commands.Bot.check_once:13 of
msgid ""
"When using this function the :class:`.Context` sent to a group subcommand"
" may only parse the parent command and not the subcommands due to it "
"being invoked once per :meth:`.Bot.invoke` call."
msgstr ""

#: discord.ext.commands.Bot.clear:1 of
msgid "Clears the internal state of the bot."
msgstr ""

#: discord.ext.commands.Bot.clear:3 of
msgid ""
"After this, the bot can be considered \"re-opened\", i.e. "
":meth:`is_closed` and :meth:`is_ready` both return ``False`` along with "
"the bot's internal cache cleared."
msgstr ""

#: discord.ext.commands.Bot.cogs:1 of
msgid "A read-only mapping of cog name to cog."
msgstr ""

#: discord.ext.commands.Bot.cogs:3 of
msgid "Mapping[:class:`str`, :class:`Cog`]"
msgstr ""

#: discord.ext.commands.Bot.command:1 discord.ext.commands.Group.command:1
#: discord.ext.commands.GroupMixin.command:1 of
msgid ""
"A shortcut decorator that invokes :func:`.command` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: discord.ext.commands.Bot.command:4 discord.ext.commands.Group.command:4
#: discord.ext.commands.GroupMixin.command:4 of
msgid ""
"A decorator that converts the provided method into a Command, adds it to "
"the bot, then returns it."
msgstr ""

#: discord.ext.commands.Bot.command:5 discord.ext.commands.Group.command:5
#: discord.ext.commands.GroupMixin.command:5 of
msgid "Callable[..., :class:`Command`]"
msgstr ""

#: discord.ext.commands.Bot.commands:1 discord.ext.commands.Group.commands:1
#: discord.ext.commands.GroupMixin.commands:1 of
msgid "A unique set of commands without aliases that are registered."
msgstr ""

#: discord.ext.commands.Bot.commands:3 discord.ext.commands.Group.commands:3
#: discord.ext.commands.GroupMixin.commands:3 of
msgid "Set[:class:`.Command`]"
msgstr ""

#: discord.ext.commands.Bot.connect:3 of
msgid ""
"Creates a websocket connection and lets the websocket listen to messages "
"from Discord. This is a loop that runs the entire event system and "
"miscellaneous aspects of the library. Control is not resumed until the "
"WebSocket connection is terminated."
msgstr ""

#: discord.ext.commands.Bot.connect:8 of
msgid ""
"If we should attempt reconnecting, either due to internet failure or a "
"specific failure on Discord's part. Certain disconnects that lead to bad "
"state will not be handled (such as invalid sharding payloads or bad "
"tokens)."
msgstr ""

#: discord.ext.commands.Bot.connect:14 of
msgid ""
"If the gateway to connect to Discord is not found. Usually if this     is"
" thrown then there is a Discord API outage."
msgstr ""

#: discord.ext.commands.Bot.connect:15 of
msgid "The websocket connection has been terminated."
msgstr ""

#: discord.ext.commands.Bot.create_guild:3 of
msgid "Creates a :class:`.Guild`."
msgstr ""

#: discord.ext.commands.Bot.create_guild:5 of
msgid "Bot accounts in more than 10 guilds are not allowed to create guilds."
msgstr ""

#: discord.ext.commands.Bot.create_guild:7 of
msgid "The name of the guild."
msgstr ""

#: discord.ext.commands.Bot.create_guild:9 of
msgid ""
"The region for the voice communication server. Defaults to "
":attr:`.VoiceRegion.us_west`."
msgstr ""

#: discord.ext.commands.Bot.create_guild:12 of
msgid ""
"The :term:`py:bytes-like object` representing the icon. See "
":meth:`.ClientUser.edit` for more details on what is expected."
msgstr ""

#: discord.ext.commands.Bot.create_guild:15 of
msgid "The code for a template to create the guild with.  .. versionadded:: 1.4"
msgstr ""

#: discord.ext.commands.Bot.create_guild:15 of
msgid "The code for a template to create the guild with."
msgstr ""

#: discord.ext.commands.Bot.create_guild:20 of
msgid "Guild creation failed."
msgstr ""

#: discord.ext.commands.Bot.create_guild:21 of
msgid "Invalid icon image format given. Must be PNG or JPG."
msgstr ""

#: discord.ext.commands.Bot.create_guild:23 of
msgid "The guild created. This is not the same guild that is added to cache."
msgstr ""

#: discord.ext.commands.Bot.create_guild:25
#: discord.ext.commands.Bot.fetch_guild:21 of
msgid ":class:`.Guild`"
msgstr ""

#: discord.ext.commands.Bot.delete_invite:3 of
msgid "Revokes an :class:`.Invite`, URL, or ID to an invite."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:5 of
msgid ""
"You must have the :attr:`~.Permissions.manage_channels` permission in the"
" associated guild to do this."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:8 of
msgid "The invite to revoke."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:11 of
msgid "You do not have permissions to revoke invites."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:12 of
msgid "The invite is invalid or expired."
msgstr ""

#: discord.ext.commands.Bot.delete_invite:13 of
msgid "Revoking the invite failed."
msgstr ""

#: discord.ext.commands.Bot.emojis:1 of
msgid "The emojis that the connected client has."
msgstr ""

#: discord.ext.commands.Bot.emojis:3 of
msgid "List[:class:`.Emoji`]"
msgstr ""

#: discord.ext.commands.Bot.event:1 of
msgid "A decorator that registers an event to listen to."
msgstr ""

#: discord.ext.commands.Bot.event:3 of
msgid ""
"You can find more info about the events on the :ref:`documentation below "
"<discord-api-events>`."
msgstr ""

#: discord.ext.commands.Bot.event:5 of
msgid ""
"The events must be a :ref:`coroutine <coroutine>`, if not, "
":exc:`TypeError` is raised."
msgstr ""

#: discord.ext.commands.Bot.extensions:1 of
msgid "A read-only mapping of extension name to extension."
msgstr ""

#: discord.ext.commands.Bot.extensions:3 of
msgid "Mapping[:class:`str`, :class:`py:types.ModuleType`]"
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:3 of
msgid ""
"Retrieves a :class:`.abc.GuildChannel` or :class:`.abc.PrivateChannel` "
"with the specified ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:7 of
msgid ""
"This method is an API call. For general usage, consider "
":meth:`get_channel` instead."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:11 of
msgid "An unknown channel type was received from Discord."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:12 of
msgid "Retrieving the channel failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:13 of
msgid "Invalid Channel ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:14 of
msgid "You do not have permission to fetch this channel."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:16 of
msgid "The channel from the ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_channel:17 of
msgid "Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`]"
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:3 of
msgid "Retrieves a :class:`.Guild` from an ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:7 of
msgid ""
"Using this, you will **not** receive :attr:`.Guild.channels`, "
":attr:`.Guild.members`, :attr:`.Member.activity` and "
":attr:`.Member.voice` per :class:`.Member`."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:12 of
msgid ""
"This method is an API call. For general usage, consider :meth:`get_guild`"
" instead."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:14 of
msgid "The guild's ID to fetch from."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:17 of
msgid "You do not have access to the guild."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:18 of
msgid "Getting the guild failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_guild:20 of
msgid "The guild from the ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:3 of
msgid "Retrieves an :class:`.AsyncIterator` that enables receiving your guilds."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:7 of
msgid ""
"Using this, you will only receive :attr:`.Guild.owner`, "
":attr:`.Guild.icon`, :attr:`.Guild.id`, and :attr:`.Guild.name` per "
":class:`.Guild`."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:12 of
msgid ""
"This method is an API call. For general usage, consider :attr:`guilds` "
"instead."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:16
#: discord.ext.commands.Context.history:7 of
msgid "Usage ::"
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:21 of
msgid "Flattening into a list ::"
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:26
#: discord.ext.commands.Context.history:19 of
msgid "All parameters are optional."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:28 of
msgid ""
"The number of guilds to retrieve. If ``None``, it retrieves every guild "
"you have access to. Note, however, that this would make it a slow "
"operation. Defaults to ``100``."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:33 of
msgid ""
"Retrieves guilds before this date or object. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:36 of
msgid ""
"Retrieve guilds after this date or object. If a date is provided it must "
"be a timezone-naive datetime representing UTC time."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:40 of
msgid "Getting the guilds failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds
#: discord.ext.commands.Bot.get_all_channels
#: discord.ext.commands.Bot.get_all_members
#: discord.ext.commands.Bot.walk_commands
#: discord.ext.commands.Cog.walk_commands discord.ext.commands.Context.history
#: discord.ext.commands.Group.walk_commands
#: discord.ext.commands.GroupMixin.walk_commands of
msgid "Yields"
msgstr ""

#: discord.ext.commands.Bot.fetch_guilds:42 of
msgid ":class:`.Guild` -- The guild with the guild data parsed."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:3 of
msgid "Gets an :class:`.Invite` from a discord.gg URL or ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:7 of
msgid ""
"If the invite is for a guild you have not joined, the guild and channel "
"attributes of the returned :class:`.Invite` will be "
":class:`.PartialInviteGuild` and :class:`.PartialInviteChannel` "
"respectively."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:11 of
msgid "The Discord invite ID or URL (must be a discord.gg URL)."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:13 of
msgid ""
"Whether to include count information in the invite. This fills the "
":attr:`.Invite.approximate_member_count` and "
":attr:`.Invite.approximate_presence_count` fields."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:18 of
msgid "The invite has expired or is invalid."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:19 of
msgid "Getting the invite failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:21 of
msgid "The invite from the URL/ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_invite:22 of
msgid ":class:`.Invite`"
msgstr ""

#: discord.ext.commands.Bot.fetch_template:3 of
msgid "Gets a :class:`.Template` from a discord.new URL or code."
msgstr ""

#: discord.ext.commands.Bot.fetch_template:5 of
msgid "The Discord Template Code or URL (must be a discord.new URL)."
msgstr ""

#: discord.ext.commands.Bot.fetch_template:8 of
msgid "The template is invalid."
msgstr ""

#: discord.ext.commands.Bot.fetch_template:9 of
msgid "Getting the template failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_template:11 of
msgid "The template from the URL/code."
msgstr ""

#: discord.ext.commands.Bot.fetch_template:12 of
msgid ":class:`.Template`"
msgstr ""

#: discord.ext.commands.Bot.fetch_user:3 of
msgid ""
"Retrieves a :class:`~discord.User` based on their ID. This can only be "
"used by bot accounts. You do not have to share any guilds with the user "
"to get this information, however many operations do require that you do."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:10 of
msgid ""
"This method is an API call. For general usage, consider :meth:`get_user` "
"instead."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:12 of
msgid "The user's ID to fetch from."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:15 of
msgid "A user with this ID does not exist."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:16 of
msgid "Fetching the user failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:18 of
msgid "The user you requested."
msgstr ""

#: discord.ext.commands.Bot.fetch_user:19 of
msgid ":class:`~discord.User`"
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:3 of
msgid "Gets an arbitrary user's profile."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:7 of
msgid "This can only be used by non-bot accounts."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:9 of
msgid "The ID of the user to fetch their profile for."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:12 of
msgid "Not allowed to fetch profiles."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:13 of
msgid "Fetching the profile failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:15 of
msgid "The profile of the user."
msgstr ""

#: discord.ext.commands.Bot.fetch_user_profile:16 of
msgid ":class:`.Profile`"
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:3 of
msgid "Retrieves a :class:`.Webhook` with the specified ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:5 of
msgid "Retrieving the webhook failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:6 of
msgid "Invalid webhook ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:7 of
msgid "You do not have permission to fetch this webhook."
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:9 of
msgid "The webhook you requested."
msgstr ""

#: discord.ext.commands.Bot.fetch_webhook:10 of
msgid ":class:`.Webhook`"
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:3 of
msgid "Gets a :class:`.Widget` from a guild ID."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:7 of
msgid "The guild must have the widget enabled to get this information."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:9 of
msgid "The ID of the guild."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:12 of
msgid "The widget for this guild is disabled."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:13 of
msgid "Retrieving the widget failed."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:15 of
msgid "The guild's widget."
msgstr ""

#: discord.ext.commands.Bot.fetch_widget:16 of
msgid ":class:`.Widget`"
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:1 of
msgid ""
"A generator that retrieves every :class:`.abc.GuildChannel` the client "
"can 'access'."
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:3
#: discord.ext.commands.Bot.get_all_members:3 of
msgid "This is equivalent to: ::"
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:11 of
msgid ""
"Just because you receive a :class:`.abc.GuildChannel` does not mean that "
"you can communicate in said channel. "
":meth:`.abc.GuildChannel.permissions_for` should be used for that."
msgstr ""

#: discord.ext.commands.Bot.get_all_channels:15 of
msgid ":class:`.abc.GuildChannel` -- A channel the client can 'access'."
msgstr ""

#: discord.ext.commands.Bot.get_all_members:1 of
msgid "Returns a generator with every :class:`.Member` the client can see."
msgstr ""

#: discord.ext.commands.Bot.get_all_members:9 of
msgid ":class:`.Member` -- A member the client can see."
msgstr ""

#: discord.ext.commands.Bot.get_channel:1 of
msgid "Returns a channel with the given ID."
msgstr ""

#: discord.ext.commands.Bot.get_channel:3 discord.ext.commands.Bot.get_emoji:3
#: discord.ext.commands.Bot.get_guild:3 discord.ext.commands.Bot.get_user:3 of
msgid "The ID to search for."
msgstr ""

#: discord.ext.commands.Bot.get_channel:6 of
msgid "The returned channel or ``None`` if not found."
msgstr ""

#: discord.ext.commands.Bot.get_channel:7 of
msgid "Optional[Union[:class:`.abc.GuildChannel`, :class:`.abc.PrivateChannel`]]"
msgstr ""

#: discord.ext.commands.Bot.get_cog:1 of
msgid "Gets the cog instance requested."
msgstr ""

#: discord.ext.commands.Bot.get_cog:3 of
msgid "If the cog is not found, ``None`` is returned instead."
msgstr ""

#: discord.ext.commands.Bot.get_cog:5 of
msgid ""
"The name of the cog you are requesting. This is equivalent to the name "
"passed via keyword argument in class creation or the class name if "
"unspecified."
msgstr ""

#: discord.ext.commands.Bot.get_cog:10 of
msgid "The cog that was requested. If not found, returns ``None``."
msgstr ""

#: discord.ext.commands.Bot.get_cog:11 discord.ext.commands.Command:62
#: discord.ext.commands.HelpCommand.cog:10 of
msgid "Optional[:class:`Cog`]"
msgstr ""

#: discord.ext.commands.Bot.get_command:1
#: discord.ext.commands.Group.get_command:1
#: discord.ext.commands.GroupMixin.get_command:1 of
msgid "Get a :class:`.Command` from the internal list of commands."
msgstr ""

#: discord.ext.commands.Bot.get_command:4
#: discord.ext.commands.Group.get_command:4
#: discord.ext.commands.GroupMixin.get_command:4 of
msgid "This could also be used as a way to get aliases."
msgstr ""

#: discord.ext.commands.Bot.get_command:6
#: discord.ext.commands.Group.get_command:6
#: discord.ext.commands.GroupMixin.get_command:6 of
msgid ""
"The name could be fully qualified (e.g. ``'foo bar'``) will get the "
"subcommand ``bar`` of the group command ``foo``. If a subcommand is not "
"found then ``None`` is returned just as usual."
msgstr ""

#: discord.ext.commands.Bot.get_command:10
#: discord.ext.commands.Group.get_command:10
#: discord.ext.commands.GroupMixin.get_command:10 of
msgid "The name of the command to get."
msgstr ""

#: discord.ext.commands.Bot.get_command:13
#: discord.ext.commands.Group.get_command:13
#: discord.ext.commands.GroupMixin.get_command:13 of
msgid "The command that was requested. If not found, returns ``None``."
msgstr ""

#: discord.ext.commands.Bot.get_command:14 discord.ext.commands.Command:56
#: discord.ext.commands.Command:103 discord.ext.commands.Command.root_parent:7
#: discord.ext.commands.Group.get_command:14
#: discord.ext.commands.Group.root_parent:7
#: discord.ext.commands.GroupMixin.get_command:14 of
msgid "Optional[:class:`Command`]"
msgstr ""

#: discord.ext.commands.Bot.get_context:3 of
msgid "Returns the invocation context from the message."
msgstr ""

#: discord.ext.commands.Bot.get_context:5 of
msgid ""
"This is a more low-level counter-part for :meth:`.process_commands` to "
"allow users more fine grained control over the processing."
msgstr ""

#: discord.ext.commands.Bot.get_context:8 of
msgid ""
"The returned context is not guaranteed to be a valid invocation context, "
":attr:`.Context.valid` must be checked to make sure it is. If the context"
" is not valid then it is not a valid candidate to be invoked under "
":meth:`~.Bot.invoke`."
msgstr ""

#: discord.ext.commands.Bot.get_context:13 of
msgid "The message to get the invocation context from."
msgstr ""

#: discord.ext.commands.Bot.get_context:15 of
msgid ""
"The factory class that will be used to create the context. By default, "
"this is :class:`.Context`. Should a custom class be provided, it must be "
"similar enough to :class:`.Context`\\'s interface."
msgstr ""

#: discord.ext.commands.Bot.get_context:20 of
msgid ""
"The invocation context. The type of this can change via the ``cls`` "
"parameter."
msgstr ""

#: discord.ext.commands.Bot.get_context:22 of
msgid ":class:`.Context`"
msgstr ""

#: discord.ext.commands.Bot.get_emoji:1 of
msgid "Returns an emoji with the given ID."
msgstr ""

#: discord.ext.commands.Bot.get_emoji:6 of
msgid "The custom emoji or ``None`` if not found."
msgstr ""

#: discord.ext.commands.Bot.get_emoji:7 of
msgid "Optional[:class:`.Emoji`]"
msgstr ""

#: discord.ext.commands.Bot.get_guild:1 of
msgid "Returns a guild with the given ID."
msgstr ""

#: discord.ext.commands.Bot.get_guild:6 of
msgid "The guild or ``None`` if not found."
msgstr ""

#: discord.ext.commands.Bot.get_guild:7 discord.ext.commands.Context.guild:3 of
msgid "Optional[:class:`.Guild`]"
msgstr ""

#: discord.ext.commands.Bot.get_prefix:3 of
msgid ""
"Retrieves the prefix the bot is listening to with the message as a "
"context."
msgstr ""

#: discord.ext.commands.Bot.get_prefix:6 of
msgid "The message context to get the prefix of."
msgstr ""

#: discord.ext.commands.Bot.get_prefix:9 of
msgid "A list of prefixes or a single prefix that the bot is listening for."
msgstr ""

#: discord.ext.commands.Bot.get_prefix:11 of
msgid "Union[List[:class:`str`], :class:`str`]"
msgstr ""

#: discord.ext.commands.Bot.get_user:1 of
msgid "Returns a user with the given ID."
msgstr ""

#: discord.ext.commands.Bot.get_user:6 of
msgid "The user or ``None`` if not found."
msgstr ""

#: discord.ext.commands.Bot.get_user:7 of
msgid "Optional[:class:`~discord.User`]"
msgstr ""

#: discord.ext.commands.Bot.group:1 discord.ext.commands.Group.group:1
#: discord.ext.commands.GroupMixin.group:1 of
msgid ""
"A shortcut decorator that invokes :func:`.group` and adds it to the "
"internal command list via :meth:`~.GroupMixin.add_command`."
msgstr ""

#: discord.ext.commands.Bot.group:4 discord.ext.commands.Group.group:4
#: discord.ext.commands.GroupMixin.group:4 of
msgid ""
"A decorator that converts the provided method into a Group, adds it to "
"the bot, then returns it."
msgstr ""

#: discord.ext.commands.Bot.group:5 discord.ext.commands.Group.group:5
#: discord.ext.commands.GroupMixin.group:5 of
msgid "Callable[..., :class:`Group`]"
msgstr ""

#: discord.ext.commands.Bot.guilds:1 of
msgid "The guilds that the connected client is a member of."
msgstr ""

#: discord.ext.commands.Bot.guilds:3 of
msgid "List[:class:`.Guild`]"
msgstr ""

#: discord.ext.commands.Bot.intents:1 of
msgid "The intents configured for this connection."
msgstr ""

#: discord.ext.commands.Bot.intents:5 of
msgid ":class:`Intents`"
msgstr ""

#: discord.ext.commands.Bot.invoke:3 of
msgid ""
"Invokes the command given under the invocation context and handles all "
"the internal event dispatch mechanisms."
msgstr ""

#: discord.ext.commands.Bot.invoke:6 of
msgid "The invocation context to invoke."
msgstr ""

#: discord.ext.commands.Bot.is_closed:1 of
msgid ":class:`bool`: Indicates if the websocket connection is closed."
msgstr ""

#: discord.ext.commands.Bot.is_owner:3 of
msgid ""
"Checks if a :class:`~discord.User` or :class:`~discord.Member` is the "
"owner of this bot."
msgstr ""

#: discord.ext.commands.Bot.is_owner:6 of
msgid ""
"If an :attr:`owner_id` is not set, it is fetched automatically through "
"the use of :meth:`~.Bot.application_info`."
msgstr ""

#: discord.ext.commands.Bot.is_owner:9 of
msgid ""
"The function also checks if the application is team-owned if "
":attr:`owner_ids` is not set."
msgstr ""

#: discord.ext.commands.Bot.is_owner:13 of
msgid "The user to check for."
msgstr ""

#: discord.ext.commands.Bot.is_owner:16 of
msgid "Whether the user is the owner."
msgstr ""

#: discord.ext.commands.Bot.is_ready:1 of
msgid ":class:`bool`: Specifies if the client's internal cache is ready for use."
msgstr ""

#: discord.ext.commands.Bot.is_ws_ratelimited:1 of
msgid ":class:`bool`: Whether the websocket is currently rate limited."
msgstr ""

#: discord.ext.commands.Bot.is_ws_ratelimited:3 of
msgid ""
"This can be useful to know when deciding whether you should query members"
" using HTTP or via the gateway."
msgstr ""

#: discord.ext.commands.Bot.latency:1 of
msgid "Measures latency between a HEARTBEAT and a HEARTBEAT_ACK in seconds."
msgstr ""

#: discord.ext.commands.Bot.latency:3 of
msgid "This could be referred to as the Discord WebSocket protocol latency."
msgstr ""

#: discord.ext.commands.Bot.latency:5
#: discord.ext.commands.Command.get_cooldown_retry_after:10
#: discord.ext.commands.CommandOnCooldown:16
#: discord.ext.commands.Group.get_cooldown_retry_after:10 of
msgid ":class:`float`"
msgstr ""

#: discord.ext.commands.Bot.listen:1 of
msgid ""
"A decorator that registers another function as an external event "
"listener. Basically this allows you to listen to multiple events from "
"different places e.g. such as :func:`.on_ready`"
msgstr ""

#: discord.ext.commands.Bot.listen:5 of
msgid "The functions being listened to must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: discord.ext.commands.Bot.listen:21 of
msgid "Would print one and two in an unspecified order."
msgstr ""

#: discord.ext.commands.Bot.listen:23 of
msgid "The function being listened to is not a coroutine."
msgstr ""

#: discord.ext.commands.Bot.load_extension:1 of
msgid "Loads an extension."
msgstr ""

#: discord.ext.commands.Bot.load_extension:3 of
msgid ""
"An extension is a python module that contains commands, cogs, or "
"listeners."
msgstr ""

#: discord.ext.commands.Bot.load_extension:6 of
msgid ""
"An extension must have a global function, ``setup`` defined as the entry "
"point on what to do when the extension is loaded. This entry point must "
"have a single argument, the ``bot``."
msgstr ""

#: discord.ext.commands.Bot.load_extension:10 of
msgid ""
"The extension name to load. It must be dot separated like regular Python "
"imports if accessing a sub-module. e.g. ``foo.test`` if you want to "
"import ``foo/test.py``."
msgstr ""

#: discord.ext.commands.Bot.load_extension:15
#: discord.ext.commands.Bot.reload_extension:14 of
msgid "The extension could not be imported."
msgstr ""

#: discord.ext.commands.Bot.load_extension:16 of
msgid "The extension is already loaded."
msgstr ""

#: discord.ext.commands.Bot.load_extension:17
#: discord.ext.commands.Bot.reload_extension:15 of
msgid "The extension does not have a setup function."
msgstr ""

#: discord.ext.commands.Bot.load_extension:18 of
msgid "The extension or its setup function had an execution error."
msgstr ""

#: discord.ext.commands.Bot.login:3 of
msgid "Logs in the client with the specified credentials."
msgstr ""

#: discord.ext.commands.Bot.login:5 of
msgid "This function can be used in two different ways."
msgstr ""

#: discord.ext.commands.Bot.login:9 of
msgid ""
"Logging on with a user token is against the Discord `Terms of Service "
"<https://support.discord.com/hc/en-us/articles/115002192352>`_ and doing "
"so might potentially get your account banned. Use this at your own risk."
msgstr ""

#: discord.ext.commands.Bot.login:14 of
msgid ""
"The authentication token. Do not prefix this token with anything as the "
"library will do it for you."
msgstr ""

#: discord.ext.commands.Bot.login:17 of
msgid ""
"Keyword argument that specifies if the account logging on is a bot token "
"or not."
msgstr ""

#: discord.ext.commands.Bot.login:21 of
msgid "The wrong credentials are passed."
msgstr ""

#: discord.ext.commands.Bot.login:22 of
msgid ""
"An unknown HTTP related error occurred,     usually when it isn't 200 or "
"the known incorrect credentials     passing status code."
msgstr ""

#: discord.ext.commands.Bot.logout:3 of
msgid "Logs out of Discord and closes all connections."
msgstr ""

#: discord.ext.commands.Bot.logout:7 of
msgid ""
"This is just an alias to :meth:`close`. If you want to do extraneous "
"cleanup when subclassing, it is suggested to override :meth:`close` "
"instead."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:3 of
msgid "The default command error handler provided by the bot."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation."
msgstr ""

#: discord.ext.commands.Bot.on_command_error:8 of
msgid "This only fires if you do not specify any listeners for command error."
msgstr ""

#: discord.ext.commands.Bot.on_error:3 of
msgid "The default error handler provided by the client."
msgstr ""

#: discord.ext.commands.Bot.on_error:5 of
msgid ""
"By default this prints to :data:`sys.stderr` however it could be "
"overridden to have a different implementation. Check "
":func:`~discord.on_error` for more details."
msgstr ""

#: discord.ext.commands.Bot.private_channels:1 of
msgid "The private channels that the connected client is participating on."
msgstr ""

#: discord.ext.commands.Bot.private_channels:5 of
msgid ""
"This returns only up to 128 most recent private channels due to an "
"internal working on how Discord deals with private channels."
msgstr ""

#: discord.ext.commands.Bot.private_channels:8 of
msgid "List[:class:`.abc.PrivateChannel`]"
msgstr ""

#: discord.ext.commands.Bot.process_commands:3 of
msgid ""
"This function processes the commands that have been registered to the bot"
" and other groups. Without this coroutine, none of the commands will be "
"triggered."
msgstr ""

#: discord.ext.commands.Bot.process_commands:7 of
msgid ""
"By default, this coroutine is called inside the :func:`.on_message` "
"event. If you choose to override the :func:`.on_message` event, then you "
"should invoke this coroutine as well."
msgstr ""

#: discord.ext.commands.Bot.process_commands:11 of
msgid ""
"This is built using other low level tools, and is equivalent to a call to"
" :meth:`~.Bot.get_context` followed by a call to :meth:`~.Bot.invoke`."
msgstr ""

#: discord.ext.commands.Bot.process_commands:14 of
msgid ""
"This also checks if the message's author is a bot and doesn't call "
":meth:`~.Bot.get_context` or :meth:`~.Bot.invoke` if so."
msgstr ""

#: discord.ext.commands.Bot.process_commands:17 of
msgid "The message to process commands for."
msgstr ""

#: discord.ext.commands.Bot.reload_extension:1 of
msgid "Atomically reloads an extension."
msgstr ""

#: discord.ext.commands.Bot.reload_extension:3 of
msgid ""
"This replaces the extension with the same extension, only refreshed. This"
" is equivalent to a :meth:`unload_extension` followed by a "
":meth:`load_extension` except done in an atomic way. That is, if an "
"operation fails mid-reload then the bot will roll-back to the prior "
"working state."
msgstr ""

#: discord.ext.commands.Bot.reload_extension:8 of
msgid ""
"The extension name to reload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: discord.ext.commands.Bot.reload_extension:13
#: discord.ext.commands.Bot.unload_extension:16 of
msgid "The extension was not loaded."
msgstr ""

#: discord.ext.commands.Bot.reload_extension:16 of
msgid "The extension setup function had an execution error."
msgstr ""

#: discord.ext.commands.Bot.remove_check:1 of
msgid "Removes a global check from the bot."
msgstr ""

#: discord.ext.commands.Bot.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the global checks."
msgstr ""

#: discord.ext.commands.Bot.remove_check:6 of
msgid "The function to remove from the global checks."
msgstr ""

#: discord.ext.commands.Bot.remove_check:7 of
msgid ""
"If the function was added with ``call_once=True`` in the "
":meth:`.Bot.add_check` call or using :meth:`.check_once`."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:1 of
msgid "Removes a cog from the bot."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:3 of
msgid ""
"All registered commands and event listeners that the cog has registered "
"will be removed as well."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:6 of
msgid "If no cog is found then this method has no effect."
msgstr ""

#: discord.ext.commands.Bot.remove_cog:8 of
msgid "The name of the cog to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_command:1
#: discord.ext.commands.Group.remove_command:1
#: discord.ext.commands.GroupMixin.remove_command:1 of
msgid "Remove a :class:`.Command` from the internal list of commands."
msgstr ""

#: discord.ext.commands.Bot.remove_command:4
#: discord.ext.commands.Group.remove_command:4
#: discord.ext.commands.GroupMixin.remove_command:4 of
msgid "This could also be used as a way to remove aliases."
msgstr ""

#: discord.ext.commands.Bot.remove_command:6
#: discord.ext.commands.Group.remove_command:6
#: discord.ext.commands.GroupMixin.remove_command:6 of
msgid "The name of the command to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_command:9
#: discord.ext.commands.Group.remove_command:9
#: discord.ext.commands.GroupMixin.remove_command:9 of
msgid ""
"The command that was removed. If the name is not valid then ``None`` is "
"returned instead."
msgstr ""

#: discord.ext.commands.Bot.remove_command:11
#: discord.ext.commands.Group.remove_command:11
#: discord.ext.commands.GroupMixin.remove_command:11 of
msgid "Optional[:class:`.Command`]"
msgstr ""

#: discord.ext.commands.Bot.remove_listener:1 of
msgid "Removes a listener from the pool of listeners."
msgstr ""

#: discord.ext.commands.Bot.remove_listener:3 of
msgid "The function that was used as a listener to remove."
msgstr ""

#: discord.ext.commands.Bot.remove_listener:4 of
msgid "The name of the event we want to remove. Defaults to ``func.__name__``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:3 of
msgid ""
"Requests previously offline members from the guild to be filled up into "
"the :attr:`.Guild.members` cache. This function is usually not called. It"
" should only be used if you have the ``fetch_offline_members`` parameter "
"set to ``False``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:8 of
msgid ""
"When the client logs on and connects to the websocket, Discord does not "
"provide the library with offline members if the number of members in the "
"guild is larger than 250. You can check if a guild is large if "
":attr:`.Guild.large` is ``True``."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:15 of
msgid "This method is deprecated. Use :meth:`Guild.chunk` instead."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:17 of
msgid "An argument list of guilds to request offline members for."
msgstr ""

#: discord.ext.commands.Bot.request_offline_members:20 of
msgid "If any guild is unavailable in the collection."
msgstr ""

#: discord.ext.commands.Bot.run:1 of
msgid ""
"A blocking call that abstracts away the event loop initialisation from "
"you."
msgstr ""

#: discord.ext.commands.Bot.run:4 of
msgid ""
"If you want more control over the event loop then this function should "
"not be used. Use :meth:`start` coroutine or :meth:`connect` + "
":meth:`login`."
msgstr ""

#: discord.ext.commands.Bot.run:8 of
msgid "Roughly Equivalent to: ::"
msgstr ""

#: discord.ext.commands.Bot.run:20 of
msgid ""
"This function must be the last function to call due to the fact that it "
"is blocking. That means that registration of events or anything being "
"called after this function call will not execute until it returns."
msgstr ""

#: discord.ext.commands.Bot.start:3 of
msgid "A shorthand coroutine for :meth:`login` + :meth:`connect`."
msgstr ""

#: discord.ext.commands.Bot.start:5 of
msgid "An unexpected keyword argument was received."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:1 of
msgid "Unloads an extension."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:3 of
msgid ""
"When the extension is unloaded, all commands, listeners, and cogs are "
"removed from the bot and the module is un-imported."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:6 of
msgid ""
"The extension can provide an optional global function, ``teardown``, to "
"do miscellaneous clean-up if necessary. This function takes a single "
"parameter, the ``bot``, similar to ``setup`` from "
":meth:`~.Bot.load_extension`."
msgstr ""

#: discord.ext.commands.Bot.unload_extension:11 of
msgid ""
"The extension name to unload. It must be dot separated like regular "
"Python imports if accessing a sub-module. e.g. ``foo.test`` if you want "
"to import ``foo/test.py``."
msgstr ""

#: discord.ext.commands.Bot.user:1 of
msgid "Represents the connected client. ``None`` if not logged in."
msgstr ""

#: discord.ext.commands.Bot.user:3 of
msgid "Optional[:class:`.ClientUser`]"
msgstr ""

#: discord.ext.commands.Bot.users:1 of
msgid "Returns a list of all the users the bot can see."
msgstr ""

#: discord.ext.commands.Bot.users:3 of
msgid "List[:class:`~discord.User`]"
msgstr ""

#: discord.ext.commands.Bot.voice_clients:1 of
msgid "Represents a list of voice connections."
msgstr ""

#: discord.ext.commands.Bot.voice_clients:3 of
msgid "These are usually :class:`.VoiceClient` instances."
msgstr ""

#: discord.ext.commands.Bot.voice_clients:5 of
#, fuzzy
msgid "List[:class:`.VoiceProtocol`]"
msgstr "Optional[:class:`.VoiceClient`]"

#: discord.ext.commands.Bot.wait_for:3 of
msgid "Waits for a WebSocket event to be dispatched."
msgstr ""

#: discord.ext.commands.Bot.wait_for:5 of
msgid ""
"This could be used to wait for a user to reply to a message, or to react "
"to a message, or to edit a message in a self-contained way."
msgstr ""

#: discord.ext.commands.Bot.wait_for:9 of
msgid ""
"The ``timeout`` parameter is passed onto :func:`asyncio.wait_for`. By "
"default, it does not timeout. Note that this does propagate the "
":exc:`asyncio.TimeoutError` for you in case of timeout and is provided "
"for ease of use."
msgstr ""

#: discord.ext.commands.Bot.wait_for:14 of
msgid ""
"In case the event returns multiple arguments, a :class:`tuple` containing"
" those arguments is returned instead. Please check the "
":ref:`documentation <discord-api-events>` for a list of events and their "
"parameters."
msgstr ""

#: discord.ext.commands.Bot.wait_for:19 of
msgid "This function returns the **first event that meets the requirements**."
msgstr ""

#: discord.ext.commands.Bot.wait_for:23 of
msgid "Waiting for a user reply: ::"
msgstr ""

#: discord.ext.commands.Bot.wait_for:37 of
msgid "Waiting for a thumbs up reaction from the message author: ::"
msgstr ""

#: discord.ext.commands.Bot.wait_for:55 of
msgid ""
"The event name, similar to the :ref:`event reference <discord-api-"
"events>`, but without the ``on_`` prefix, to wait for."
msgstr ""

#: discord.ext.commands.Bot.wait_for:58 of
msgid ""
"A predicate to check what to wait for. The arguments must meet the "
"parameters of the event being waited for."
msgstr ""

#: discord.ext.commands.Bot.wait_for:61 of
msgid ""
"The number of seconds to wait before timing out and raising "
":exc:`asyncio.TimeoutError`."
msgstr ""

#: discord.ext.commands.Bot.wait_for:65 of
msgid "If a timeout is provided and it was reached."
msgstr ""

#: discord.ext.commands.Bot.wait_for:67 of
msgid ""
"Returns no arguments, a single argument, or a :class:`tuple` of multiple "
"arguments that mirrors the parameters passed in the :ref:`event reference"
" <discord-api-events>`."
msgstr ""

#: discord.ext.commands.Bot.wait_until_ready:3 of
msgid "Waits until the client's internal cache is all ready."
msgstr ""

#: discord.ext.commands.Bot.walk_commands:1
#: discord.ext.commands.Group.walk_commands:1
#: discord.ext.commands.GroupMixin.walk_commands:1 of
msgid "An iterator that recursively walks through all commands and subcommands."
msgstr ""

#: discord.ext.commands.Bot.walk_commands:3
#: discord.ext.commands.Group.walk_commands:3
#: discord.ext.commands.GroupMixin.walk_commands:3 of
msgid "Duplicates due to aliases are no longer returned"
msgstr ""

#: discord.ext.commands.Bot.walk_commands:6
#: discord.ext.commands.Group.walk_commands:6
#: discord.ext.commands.GroupMixin.walk_commands:6 of
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"internal list of commands."
msgstr ""

#: ../../ext/commands/api.rst:23
msgid "AutoShardedBot"
msgstr ""

#: discord.ext.commands.AutoShardedBot:1 of
msgid ""
"This is similar to :class:`.Bot` except that it is inherited from "
":class:`discord.AutoShardedClient` instead."
msgstr ""

#: ../../ext/commands/api.rst:31
msgid "Prefix Helpers"
msgstr ""

#: discord.ext.commands.when_mentioned:1 of
msgid "A callable that implements a command prefix equivalent to being mentioned."
msgstr ""

#: discord.ext.commands.when_mentioned:3
#: discord.ext.commands.when_mentioned_or:3 of
msgid ""
"These are meant to be passed into the :attr:`.Bot.command_prefix` "
"attribute."
msgstr ""

#: discord.ext.commands.when_mentioned_or:1 of
msgid "A callable that implements when mentioned or other prefixes provided."
msgstr ""

#: discord.ext.commands.when_mentioned_or:13 of
msgid ""
"This callable returns another callable, so if this is done inside a "
"custom callable, you must call the returned callable, for example:"
msgstr ""

#: discord.ext.commands.when_mentioned_or:23 of
msgid ":func:`.when_mentioned`"
msgstr ""

#: ../../ext/commands/api.rst:40
msgid "Event Reference"
msgstr ""

#: ../../ext/commands/api.rst:42
msgid ""
"These events function similar to :ref:`the regular events <discord-api-"
"events>`, except they are custom to the command extension module."
msgstr ""

#: ../../ext/commands/api.rst:47
msgid ""
"An error handler that is called when an error is raised inside a command "
"either through user input error, check failure, or an error in your own "
"code."
msgstr ""

#: ../../ext/commands/api.rst:51
msgid "A default one is provided (:meth:`.Bot.on_command_error`)."
msgstr ""

#: ../../ext/commands/api.rst:53 ../../ext/commands/api.rst:65
#: ../../ext/commands/api.rst:75 discord.ext.commands.Cog.cog_after_invoke:7
#: discord.ext.commands.Cog.cog_before_invoke:7
#: discord.ext.commands.HelpCommand.on_help_command_error:11
#: discord.ext.commands.HelpCommand.prepare_help_command:15 of
msgid "The invocation context."
msgstr ""

#: ../../ext/commands/api.rst:55
#: discord.ext.commands.HelpCommand.on_help_command_error:13 of
msgid "The error that was raised."
msgstr ""

#: ../../ext/commands/api.rst:60
msgid ""
"An event that is called when a command is found and is about to be "
"invoked."
msgstr ""

#: ../../ext/commands/api.rst:62
msgid ""
"This event is called regardless of whether the command itself succeeds "
"via error or completes."
msgstr ""

#: ../../ext/commands/api.rst:70
msgid "An event that is called when a command has completed its invocation."
msgstr ""

#: ../../ext/commands/api.rst:72
msgid ""
"This event is called only if the command succeeded, i.e. all checks have "
"passed and the user input it correctly."
msgstr ""

#: ../../ext/commands/api.rst:81
msgid "Commands"
msgstr ""

#: ../../ext/commands/api.rst:84
msgid "Decorators"
msgstr ""

#: discord.ext.commands.command:1 of
msgid ""
"A decorator that transforms a function into a :class:`.Command` or if "
"called with :func:`.group`, :class:`.Group`."
msgstr ""

#: discord.ext.commands.command:4 of
msgid ""
"By default the ``help`` attribute is received automatically from the "
"docstring of the function and is cleaned up with the use of "
"``inspect.cleandoc``. If the docstring is ``bytes``, then it is decoded "
"into :class:`str` using utf-8 encoding."
msgstr ""

#: discord.ext.commands.command:9 of
msgid ""
"All checks added using the :func:`.check` & co. decorators are added into"
" the function. There is no way to supply your own checks through this "
"decorator."
msgstr ""

#: discord.ext.commands.command:13 of
msgid ""
"The name to create the command with. By default this uses the function "
"name unchanged."
msgstr ""

#: discord.ext.commands.command:16 of
msgid ""
"The class to construct with. By default this is :class:`.Command`. You "
"usually do not change this."
msgstr ""

#: discord.ext.commands.command:18 of
msgid ""
"Keyword arguments to pass into the construction of the class denoted by "
"``cls``."
msgstr ""

#: discord.ext.commands.command:21 of
msgid "If the function is not a coroutine or is already a command."
msgstr ""

#: discord.ext.commands.group:1 of
msgid "A decorator that transforms a function into a :class:`.Group`."
msgstr ""

#: discord.ext.commands.group:3 of
msgid ""
"This is similar to the :func:`.command` decorator but the ``cls`` "
"parameter is set to :class:`Group` by default."
msgstr ""

#: discord.ext.commands.group:6 of
msgid "The ``cls`` parameter can now be passed."
msgstr ""

#: ../../ext/commands/api.rst:91
msgid "Command"
msgstr ""

#: discord.ext.commands.Command:1 of
msgid "A class that implements the protocol for a bot text command."
msgstr ""

#: discord.ext.commands.Command:3 of
msgid ""
"These are not created manually, instead they are created via the "
"decorator or functional interface."
msgstr ""

#: discord.ext.commands.Command:8 of
msgid "The name of the command."
msgstr ""

#: discord.ext.commands.Command:14 of
msgid "The coroutine that is executed when the command is called."
msgstr ""

#: discord.ext.commands.Command:16 of
msgid ":ref:`coroutine <coroutine>`"
msgstr ""

#: discord.ext.commands.Command:20 of
msgid "The long help text for the command."
msgstr ""

#: discord.ext.commands.Command:26 of
msgid "The short help text for the command."
msgstr ""

#: discord.ext.commands.Command:28 discord.ext.commands.Command.cog_name:3
#: discord.ext.commands.Context:70 discord.ext.commands.Group.cog_name:3 of
msgid "Optional[:class:`str`]"
msgstr ""

#: discord.ext.commands.Command:32 of
msgid "A replacement for arguments in the default help text."
msgstr ""

#: discord.ext.commands.Command:38 of
msgid "The list of aliases the command can be invoked under."
msgstr ""

#: discord.ext.commands.Command:40 of
msgid "Union[List[:class:`str`], Tuple[:class:`str`]]"
msgstr ""

#: discord.ext.commands.Command:44 of
msgid ""
"A boolean that indicates if the command is currently enabled. If the "
"command is invoked while it is disabled, then :exc:`.DisabledCommand` is "
"raised to the :func:`.on_command_error` event. Defaults to ``True``."
msgstr ""

#: discord.ext.commands.Command:53 of
msgid ""
"The parent command that this command belongs to. ``None`` if there isn't "
"one."
msgstr ""

#: discord.ext.commands.Command:60 of
msgid "The cog that this command belongs to. ``None`` if there isn't one."
msgstr ""

#: discord.ext.commands.Command:66 of
msgid ""
"A list of predicates that verifies if the command could be executed with "
"the given :class:`.Context` as the sole parameter. If an exception is "
"necessary to be thrown to signal failure, then one inherited from "
":exc:`.CommandError` should be used. Note that if the checks fail then "
":exc:`.CheckFailure` exception is raised to the :func:`.on_command_error`"
" event."
msgstr ""

#: discord.ext.commands.Command:73 of
msgid "List[Callable[..., :class:`bool`]]"
msgstr ""

#: discord.ext.commands.Command:77 of
msgid "The message prefixed into the default help command."
msgstr ""

#: discord.ext.commands.Command:83 of
msgid ""
"If ``True``\\, the default help command does not show this in the help "
"output."
msgstr ""

#: discord.ext.commands.Command:90 of
msgid ""
"If ``False`` and a keyword-only argument is provided then the keyword "
"only argument is stripped and handled as if it was a regular argument "
"that handles :exc:`.MissingRequiredArgument` and default values in a "
"regular matter rather than passing the rest completely raw. If ``True`` "
"then the keyword-only argument will pass in the rest of the arguments in "
"a completely raw matter. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Command:101 of
msgid "The subcommand that was invoked, if any."
msgstr ""

#: discord.ext.commands.Command:107 of
msgid ""
"If ``True`` and a variadic positional argument is specified, requires the"
" user to specify at least one argument. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Command:116 of
msgid ""
"If ``True``\\, ignores extraneous strings passed to a command if all its "
"requirements are met (e.g. ``?foo a b c`` when only expecting ``a`` and "
"``b``). Otherwise :func:`.on_command_error` and local error handlers are "
"called with :exc:`.TooManyArguments`. Defaults to ``True``."
msgstr ""

#: discord.ext.commands.Command:125 of
msgid ""
"If ``True``\\, cooldown processing is done after argument parsing, which "
"calls converters. If ``False`` then cooldown processing is done first and"
" then the converters are called second. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Command.add_check:1
#: discord.ext.commands.Group.add_check:1 of
msgid "Adds a check to the command."
msgstr ""

#: discord.ext.commands.Command.add_check:3
#: discord.ext.commands.Group.add_check:3 of
msgid "This is the non-decorator interface to :func:`.check`."
msgstr ""

#: discord.ext.commands.Command.add_check:7
#: discord.ext.commands.Group.add_check:7
#: discord.ext.commands.HelpCommand.add_check:5 of
msgid "The function that will be used as a check."
msgstr ""

#: discord.ext.commands.Command.remove_check:1
#: discord.ext.commands.Group.remove_check:1 of
msgid "Removes a check from the command."
msgstr ""

#: discord.ext.commands.Command.remove_check:3
#: discord.ext.commands.Group.remove_check:3
#: discord.ext.commands.HelpCommand.remove_check:3 of
msgid ""
"This function is idempotent and will not raise an exception if the "
"function is not in the command's checks."
msgstr ""

#: discord.ext.commands.Command.remove_check:8
#: discord.ext.commands.Group.remove_check:8
#: discord.ext.commands.HelpCommand.remove_check:8 of
msgid "The function to remove from the checks."
msgstr ""

#: discord.ext.commands.Command.update:1 discord.ext.commands.Group.update:1 of
msgid "Updates :class:`Command` instance with updated attribute."
msgstr ""

#: discord.ext.commands.Command.update:3 discord.ext.commands.Group.update:3 of
msgid ""
"This works similarly to the :func:`.command` decorator in terms of "
"parameters in that they are passed to the :class:`Command` or subclass "
"constructors, sans the name and callback."
msgstr ""

#: discord.ext.commands.Command.__call__:3 of
msgid "Calls the internal callback that the command holds."
msgstr ""

#: discord.ext.commands.Command.__call__:7 of
msgid ""
"This bypasses all mechanisms -- including checks, converters, invoke "
"hooks, cooldowns, etc. You must take care to pass the proper arguments "
"and types to this function."
msgstr ""

#: discord.ext.commands.Command.copy:1 of
msgid "Creates a copy of this command."
msgstr ""

#: discord.ext.commands.Command.copy:3 of
msgid "A new instance of this command."
msgstr ""

#: discord.ext.commands.Command.copy:4 discord.ext.commands.Context:47
#: discord.ext.commands.Context:61 of
msgid ":class:`Command`"
msgstr ""

#: discord.ext.commands.Command.clean_params:1
#: discord.ext.commands.Group.clean_params:1 of
msgid ""
"OrderedDict[:class:`str`, :class:`inspect.Parameter`]: Retrieves the "
"parameter OrderedDict without the context or self parameters."
msgstr ""

#: discord.ext.commands.Command.clean_params:4
#: discord.ext.commands.Group.clean_params:4 of
msgid "Useful for inspecting signature."
msgstr ""

#: discord.ext.commands.Command.full_parent_name:1
#: discord.ext.commands.Group.full_parent_name:1 of
msgid "Retrieves the fully qualified parent command name."
msgstr ""

#: discord.ext.commands.Command.full_parent_name:3
#: discord.ext.commands.Group.full_parent_name:3 of
msgid ""
"This the base command name required to execute it. For example, in ``?one"
" two three`` the parent name would be ``one two``."
msgstr ""

#: discord.ext.commands.Command.parents:1 discord.ext.commands.Group.parents:1
#: of
msgid "Retrieves the parents of this command."
msgstr ""

#: discord.ext.commands.Command.parents:3 discord.ext.commands.Group.parents:3
#: of
msgid "If the command has no parents then it returns an empty :class:`list`."
msgstr ""

#: discord.ext.commands.Command.parents:5 discord.ext.commands.Group.parents:5
#: of
msgid "For example in commands ``?a b c test``, the parents are ``[c, b, a]``."
msgstr ""

#: discord.ext.commands.Command.parents:9 discord.ext.commands.Group.parents:9
#: discord.ext.commands.HelpCommand.filter_commands:18 of
msgid "List[:class:`Command`]"
msgstr ""

#: discord.ext.commands.Command.root_parent:1
#: discord.ext.commands.Group.root_parent:1 of
msgid "Retrieves the root parent of this command."
msgstr ""

#: discord.ext.commands.Command.root_parent:3
#: discord.ext.commands.Group.root_parent:3 of
msgid "If the command has no parents then it returns ``None``."
msgstr ""

#: discord.ext.commands.Command.root_parent:5
#: discord.ext.commands.Group.root_parent:5 of
msgid "For example in commands ``?a b c test``, the root parent is ``a``."
msgstr ""

#: discord.ext.commands.Command.qualified_name:1
#: discord.ext.commands.Group.qualified_name:1 of
msgid "Retrieves the fully qualified command name."
msgstr ""

#: discord.ext.commands.Command.qualified_name:3
#: discord.ext.commands.Group.qualified_name:3 of
msgid ""
"This is the full parent name with the command name as well. For example, "
"in ``?one two three`` the qualified name would be ``one two three``."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:1
#: discord.ext.commands.Group.is_on_cooldown:1 of
msgid "Checks whether the command is currently on cooldown."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:3
#: discord.ext.commands.Group.is_on_cooldown:3 of
msgid "The invocation context to use when checking the commands cooldown status."
msgstr ""

#: discord.ext.commands.Command.is_on_cooldown:6
#: discord.ext.commands.Group.is_on_cooldown:6 of
msgid "A boolean indicating if the command is on cooldown."
msgstr ""

#: discord.ext.commands.Command.reset_cooldown:1
#: discord.ext.commands.Group.reset_cooldown:1 of
msgid "Resets the cooldown on this command."
msgstr ""

#: discord.ext.commands.Command.reset_cooldown:3
#: discord.ext.commands.Group.reset_cooldown:3 of
msgid "The invocation context to reset the cooldown under."
msgstr ""

#: discord.ext.commands.Command.get_cooldown_retry_after:1
#: discord.ext.commands.Group.get_cooldown_retry_after:1 of
msgid "Retrieves the amount of seconds before this command can be tried again."
msgstr ""

#: discord.ext.commands.Command.get_cooldown_retry_after:5
#: discord.ext.commands.Group.get_cooldown_retry_after:5 of
msgid "The invocation context to retrieve the cooldown from."
msgstr ""

#: discord.ext.commands.Command.get_cooldown_retry_after:8
#: discord.ext.commands.Group.get_cooldown_retry_after:8 of
msgid ""
"The amount of time left on this command's cooldown in seconds. If this is"
" ``0.0`` then the command isn't on cooldown."
msgstr ""

#: discord.ext.commands.Command.error:1 discord.ext.commands.Group.error:1 of
msgid "A decorator that registers a coroutine as a local error handler."
msgstr ""

#: discord.ext.commands.Command.error:3 discord.ext.commands.Group.error:3 of
msgid ""
"A local error handler is an :func:`.on_command_error` event limited to a "
"single command. However, the :func:`.on_command_error` is still invoked "
"afterwards as the catch-all."
msgstr ""

#: discord.ext.commands.Command.error:7 discord.ext.commands.Group.error:7 of
msgid "The coroutine to register as the local error handler."
msgstr ""

#: discord.ext.commands.Command.before_invoke:9
#: discord.ext.commands.Group.before_invoke:9 of
msgid "See :meth:`.Bot.before_invoke` for more info."
msgstr ""

#: discord.ext.commands.Command.after_invoke:9
#: discord.ext.commands.Group.after_invoke:9 of
msgid "See :meth:`.Bot.after_invoke` for more info."
msgstr ""

#: discord.ext.commands.Command.cog_name:1
#: discord.ext.commands.Group.cog_name:1 of
msgid "The name of the cog this command belongs to, if any."
msgstr ""

#: discord.ext.commands.Command.short_doc:1
#: discord.ext.commands.Group.short_doc:1 of
msgid "Gets the \"short\" documentation of a command."
msgstr ""

#: discord.ext.commands.Command.short_doc:3
#: discord.ext.commands.Group.short_doc:3 of
msgid ""
"By default, this is the :attr:`brief` attribute. If that lookup leads to "
"an empty string then the first line of the :attr:`help` attribute is used"
" instead."
msgstr ""

#: discord.ext.commands.Command.signature:1
#: discord.ext.commands.Group.signature:1 of
msgid "Returns a POSIX-like signature useful for help command output."
msgstr ""

#: discord.ext.commands.Command.can_run:3 discord.ext.commands.Group.can_run:3
#: of
msgid ""
"Checks if the command can be executed by checking all the predicates "
"inside the :attr:`checks` attribute. This also checks whether the command"
" is disabled."
msgstr ""

#: discord.ext.commands.Command.can_run:7 discord.ext.commands.Group.can_run:7
#: of
msgid "Checks whether the command is disabled or not"
msgstr ""

#: discord.ext.commands.Command.can_run:10
#: discord.ext.commands.Group.can_run:10 of
msgid "The ctx of the command currently being invoked."
msgstr ""

#: discord.ext.commands.Command.can_run:13
#: discord.ext.commands.Group.can_run:13 of
msgid ""
"Any command error that was raised during a check call will be propagated"
"     by this function."
msgstr ""

#: discord.ext.commands.Command.can_run:15
#: discord.ext.commands.Group.can_run:15 of
msgid "A boolean indicating if the command can be invoked."
msgstr ""

#: ../../ext/commands/api.rst:100
msgid "Group"
msgstr ""

#: discord.ext.commands.Group:1 of
msgid ""
"A class that implements a grouping protocol for commands to be executed "
"as subcommands."
msgstr ""

#: discord.ext.commands.Group:4 of
msgid ""
"This class is a subclass of :class:`.Command` and thus all options valid "
"in :class:`.Command` are valid in here as well."
msgstr ""

#: discord.ext.commands.Group:9 of
msgid ""
"Indicates if the group callback should begin parsing and invocation only "
"if no subcommand was found. Useful for making it an error handling "
"function to tell the user that no subcommand was found or to have "
"different functionality in case no subcommand was found. If this is "
"``False``, then the group callback will always be invoked first. This "
"means that the checks and the parsing dictated by its parameters will be "
"executed. Defaults to ``False``."
msgstr ""

#: discord.ext.commands.Group:22 of
msgid ""
"Indicates if the group's commands should be case insensitive. Defaults to"
" ``False``."
msgstr ""

#: discord.ext.commands.Group.copy:1 of
msgid "Creates a copy of this :class:`Group`."
msgstr ""

#: discord.ext.commands.Group.copy:3 of
msgid "A new instance of this group."
msgstr ""

#: discord.ext.commands.Group.copy:4 of
msgid ":class:`Group`"
msgstr ""

#: ../../ext/commands/api.rst:109
msgid "GroupMixin"
msgstr ""

#: discord.ext.commands.GroupMixin:1 of
msgid ""
"A mixin that implements common functionality for classes that behave "
"similar to :class:`.Group` and are allowed to register commands."
msgstr ""

#: discord.ext.commands.GroupMixin:6 of
msgid "A mapping of command name to :class:`.Command` objects."
msgstr ""

#: discord.ext.commands.CogMeta:65 discord.ext.commands.Context:35
#: discord.ext.commands.GroupMixin:9 discord.ext.commands.HelpCommand:40 of
msgid ":class:`dict`"
msgstr ""

#: discord.ext.commands.GroupMixin:13 of
msgid "Whether the commands should be case insensitive. Defaults to ``False``."
msgstr ""

#: ../../ext/commands/api.rst:119
msgid "Cogs"
msgstr ""

#: ../../ext/commands/api.rst:122
msgid "Cog"
msgstr ""

#: discord.ext.commands.Cog:1 of
msgid "The base class that all cogs must inherit from."
msgstr ""

#: discord.ext.commands.Cog:3 of
msgid ""
"A cog is a collection of commands, listeners, and optional state to help "
"group commands together. More information on them can be found on the "
":ref:`ext_commands_cogs` page."
msgstr ""

#: discord.ext.commands.Cog:7 of
msgid ""
"When inheriting from this class, the options shown in :class:`CogMeta` "
"are equally valid here."
msgstr ""

#: discord.ext.commands.Cog.get_commands:1 of
msgid ""
"A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
"  .. note::      This does not include subcommands."
msgstr ""

#: discord.ext.commands.Cog.get_commands:1 of
msgid "A :class:`list` of :class:`.Command`\\s that are defined inside this cog."
msgstr ""

#: discord.ext.commands.Cog.get_commands:6 of
msgid "This does not include subcommands."
msgstr ""

#: discord.ext.commands.Cog.get_commands:7 of
msgid "List[:class:`.Command`]"
msgstr ""

#: discord.ext.commands.Cog.qualified_name:1 of
msgid "Returns the cog's specified name, not the class name."
msgstr ""

#: discord.ext.commands.Cog.description:1 of
msgid "Returns the cog's description, typically the cleaned docstring."
msgstr ""

#: discord.ext.commands.Cog.walk_commands:1 of
msgid ""
"An iterator that recursively walks through this cog's commands and "
"subcommands."
msgstr ""

#: discord.ext.commands.Cog.walk_commands:3 of
msgid ""
"Union[:class:`.Command`, :class:`.Group`] -- A command or group from the "
"cog."
msgstr ""

#: discord.ext.commands.Cog.get_listeners:1 of
msgid ""
"Returns a :class:`list` of (name, function) listener pairs that are "
"defined in this cog."
msgstr ""

#: discord.ext.commands.Cog.get_listeners:3 of
msgid "The listeners defined in this cog."
msgstr ""

#: discord.ext.commands.Cog.get_listeners:4 of
msgid "List[Tuple[:class:`str`, :ref:`coroutine <coroutine>`]]"
msgstr ""

#: discord.ext.commands.Cog.listener:1 of
msgid "A decorator that marks a function as a listener."
msgstr ""

#: discord.ext.commands.Cog.listener:3 of
msgid "This is the cog equivalent of :meth:`.Bot.listen`."
msgstr ""

#: discord.ext.commands.Cog.listener:5 of
msgid ""
"The name of the event being listened to. If not provided, it defaults to "
"the function's name."
msgstr ""

#: discord.ext.commands.Cog.listener:9 of
msgid ""
"The function is not a coroutine function or a string was not passed as"
"     the name."
msgstr ""

#: discord.ext.commands.Cog.cog_unload:1 of
msgid "A special method that is called when the cog gets removed."
msgstr ""

#: discord.ext.commands.Cog.cog_unload:3 of
msgid "This function **cannot** be a coroutine. It must be a regular function."
msgstr ""

#: discord.ext.commands.Cog.cog_unload:6 of
msgid "Subclasses must replace this if they want special unloading behaviour."
msgstr ""

#: discord.ext.commands.Cog.bot_check_once:1 of
msgid "A special method that registers as a :meth:`.Bot.check_once` check."
msgstr ""

#: discord.ext.commands.Cog.bot_check:4
#: discord.ext.commands.Cog.bot_check_once:4
#: discord.ext.commands.Cog.cog_check:4 of
msgid ""
"This function **can** be a coroutine and must take a sole parameter, "
"``ctx``, to represent the :class:`.Context`."
msgstr ""

#: discord.ext.commands.Cog.bot_check:1 of
msgid "A special method that registers as a :meth:`.Bot.check` check."
msgstr ""

#: discord.ext.commands.Cog.cog_check:1 of
msgid ""
"A special method that registers as a :func:`commands.check` for every "
"command and subcommand in this cog."
msgstr ""

#: discord.ext.commands.Cog.cog_command_error:1 of
msgid ""
"A special method that is called whenever an error is dispatched inside "
"this cog."
msgstr ""

#: discord.ext.commands.Cog.cog_command_error:4 of
msgid ""
"This is similar to :func:`.on_command_error` except only applying to the "
"commands inside this cog."
msgstr ""

#: discord.ext.commands.Cog.cog_after_invoke:5
#: discord.ext.commands.Cog.cog_before_invoke:5
#: discord.ext.commands.Cog.cog_command_error:7 of
msgid "This **must** be a coroutine."
msgstr ""

#: discord.ext.commands.Cog.cog_command_error:9 of
msgid "The invocation context where the error happened."
msgstr ""

#: discord.ext.commands.Cog.cog_command_error:11 of
msgid "The error that happened."
msgstr ""

#: discord.ext.commands.Cog.cog_before_invoke:1 of
msgid "A special method that acts as a cog local pre-invoke hook."
msgstr ""

#: discord.ext.commands.Cog.cog_before_invoke:3 of
msgid "This is similar to :meth:`.Command.before_invoke`."
msgstr ""

#: discord.ext.commands.Cog.cog_after_invoke:1 of
msgid "A special method that acts as a cog local post-invoke hook."
msgstr ""

#: discord.ext.commands.Cog.cog_after_invoke:3 of
msgid "This is similar to :meth:`.Command.after_invoke`."
msgstr ""

#: ../../ext/commands/api.rst:130
msgid "CogMeta"
msgstr ""

#: discord.ext.commands.CogMeta:1 of
msgid "A metaclass for defining a cog."
msgstr ""

#: discord.ext.commands.CogMeta:3 of
msgid ""
"Note that you should probably not use this directly. It is exposed purely"
" for documentation purposes along with making custom metaclasses to "
"intermix with other metaclasses such as the :class:`abc.ABCMeta` "
"metaclass."
msgstr ""

#: discord.ext.commands.CogMeta:7 of
msgid ""
"For example, to create an abstract cog mixin class, the following would "
"be done."
msgstr ""

#: discord.ext.commands.CogMeta:24 of
msgid ""
"When passing an attribute of a metaclass that is documented below, note "
"that you must pass it as a keyword-only argument to the class creation "
"like the following example:"
msgstr ""

#: discord.ext.commands.CogMeta:35 of
msgid ""
"The cog name. By default, it is the name of the class with no "
"modification."
msgstr ""

#: discord.ext.commands.CogMeta:41 of
msgid "The cog description. By default, it is the cleaned docstring of the class."
msgstr ""

#: discord.ext.commands.CogMeta:49 of
msgid ""
"A list of attributes to apply to every command inside this cog. The "
"dictionary is passed into the :class:`Command` options at ``__init__``. "
"If you specify attributes inside the command attribute in the class, it "
"will override the one specified inside this attribute. For example:"
msgstr ""

#: ../../ext/commands/api.rst:140
msgid "Help Commands"
msgstr ""

#: ../../ext/commands/api.rst:143
#, fuzzy
msgid "HelpCommand"
msgstr "추가할 명령어."

#: discord.ext.commands.HelpCommand:1 of
msgid "The base implementation for help command formatting."
msgstr ""

#: discord.ext.commands.HelpCommand:5 of
msgid ""
"Internally instances of this class are deep copied every time the command"
" itself is invoked to prevent a race condition mentioned in "
":issue:`2123`."
msgstr ""

#: discord.ext.commands.HelpCommand:9 of
msgid ""
"This means that relying on the state of this class to be the same between"
" command invocations would not work as expected."
msgstr ""

#: discord.ext.commands.HelpCommand:14 of
msgid ""
"The context that invoked this help formatter. This is generally set after"
" the help command assigned, :func:`command_callback`\\, has been called."
msgstr ""

#: discord.ext.commands.HelpCommand:17 of
msgid "Optional[:class:`Context`]"
msgstr ""

#: discord.ext.commands.HelpCommand:21 of
msgid ""
"Specifies if hidden commands should be shown in the output. Defaults to "
"``False``."
msgstr ""

#: discord.ext.commands.HelpCommand:28 of
msgid ""
"Specifies if commands should have their :attr:`.Command.checks` called "
"and verified. Defaults to ``True``."
msgstr ""

#: discord.ext.commands.HelpCommand:35 of
msgid ""
"A dictionary of options to pass in for the construction of the help "
"command. This allows you to change the command behaviour without actually"
" changing the implementation of the command. The attributes will be the "
"same as the ones passed in the :class:`.Command` constructor."
msgstr ""

#: discord.ext.commands.HelpCommand.add_check:1 of
msgid "Adds a check to the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.remove_check:1 of
msgid "Removes a check from the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.get_bot_mapping:1 of
msgid "Retrieves the bot mapping passed to :meth:`send_bot_help`."
msgstr ""

#: discord.ext.commands.HelpCommand.clean_prefix:1 of
msgid ""
"The cleaned up invoke prefix. i.e. mentions are ``@name`` instead of "
"``<@id>``."
msgstr ""

#: discord.ext.commands.HelpCommand.invoked_with:1 of
msgid ""
"Similar to :attr:`Context.invoked_with` except properly handles the case "
"where :meth:`Context.send_help` is used."
msgstr ""

#: discord.ext.commands.HelpCommand.invoked_with:4 of
msgid ""
"If the help command was used regularly then this returns the "
":attr:`Context.invoked_with` attribute. Otherwise, if it the help command"
" was called using :meth:`Context.send_help` then it returns the internal "
"command name of the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.invoked_with:9 of
msgid "The command name that triggered this invocation."
msgstr ""

#: discord.ext.commands.HelpCommand.get_command_signature:1
#: discord.ext.commands.MinimalHelpCommand.get_command_signature:1 of
msgid "Retrieves the signature portion of the help page."
msgstr ""

#: discord.ext.commands.HelpCommand.get_command_signature:3
#: discord.ext.commands.MinimalHelpCommand.get_command_signature:3 of
msgid "The command to get the signature of."
msgstr ""

#: discord.ext.commands.HelpCommand.get_command_signature:6
#: discord.ext.commands.MinimalHelpCommand.get_command_signature:6 of
msgid "The signature for the command."
msgstr ""

#: discord.ext.commands.HelpCommand.remove_mentions:1 of
msgid "Removes mentions from the string to prevent abuse."
msgstr ""

#: discord.ext.commands.HelpCommand.remove_mentions:3 of
msgid "This includes ``@everyone``, ``@here``, member mentions and role mentions."
msgstr ""

#: discord.ext.commands.HelpCommand.remove_mentions:5 of
msgid "The string with mentions removed."
msgstr ""

#: discord.ext.commands.HelpCommand.cog:1 of
msgid "A property for retrieving or setting the cog for the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.cog:3 of
msgid ""
"When a cog is set for the help command, it is as-if the help command "
"belongs to that cog. All cog special methods will apply to the help "
"command and it will be automatically unset on unload."
msgstr ""

#: discord.ext.commands.HelpCommand.cog:7 of
msgid "To unbind the cog from the help command, you can set it to ``None``."
msgstr ""

#: discord.ext.commands.HelpCommand.cog:9 of
msgid "The cog that is currently set for the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.command_not_found:1
#: discord.ext.commands.HelpCommand.subcommand_not_found:1 of
msgid "|maybecoro|"
msgstr ""

#: discord.ext.commands.HelpCommand.command_not_found:3 of
msgid ""
"A method called when a command is not found in the help command. This is "
"useful to override for i18n."
msgstr ""

#: discord.ext.commands.HelpCommand.command_not_found:6 of
msgid "Defaults to ``No command called {0} found.``"
msgstr ""

#: discord.ext.commands.HelpCommand.command_not_found:8 of
msgid ""
"The string that contains the invalid command. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: discord.ext.commands.HelpCommand.command_not_found:12 of
msgid "The string to use when a command has not been found."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:3 of
msgid ""
"A method called when a command did not have a subcommand requested in the"
" help command. This is useful to override for i18n."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:6 of
msgid "Defaults to either:"
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:8 of
msgid "``'Command \"{command.qualified_name}\" has no subcommands.'``"
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:9 of
msgid "If there is no subcommand in the ``command`` parameter."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:11 of
msgid ""
"``'Command \"{command.qualified_name}\" has no subcommand named "
"{string}'``"
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:11 of
msgid "If the ``command`` parameter has subcommands but not one named ``string``."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:13 of
msgid "The command that did not have the subcommand requested."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:15 of
msgid ""
"The string that contains the invalid subcommand. Note that this has had "
"mentions removed to prevent abuse."
msgstr ""

#: discord.ext.commands.HelpCommand.subcommand_not_found:19 of
msgid "The string to use when the command did not have the subcommand requested."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:3 of
msgid "Returns a filtered list of commands and optionally sorts them."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:5 of
msgid ""
"This takes into account the :attr:`verify_checks` and :attr:`show_hidden`"
" attributes."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:8 of
msgid "An iterable of commands that are getting filtered."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:10 of
msgid "Whether to sort the result."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:12 of
msgid ""
"An optional key function to pass to :func:`py:sorted` that takes a "
":class:`Command` as its sole parameter. If ``sort`` is passed as ``True``"
" then this will default as the command name."
msgstr ""

#: discord.ext.commands.HelpCommand.filter_commands:17 of
msgid "A list of commands that passed the filter."
msgstr ""

#: discord.ext.commands.HelpCommand.get_max_size:1 of
msgid "Returns the largest name length of the specified command list."
msgstr ""

#: discord.ext.commands.HelpCommand.get_max_size:3 of
msgid "A sequence of commands to check for the largest size."
msgstr ""

#: discord.ext.commands.HelpCommand.get_max_size:6 of
msgid "The maximum width of the commands."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:12
#: discord.ext.commands.DefaultHelpCommand:42
#: discord.ext.commands.HelpCommand.get_max_size:7
#: discord.ext.commands.MaxConcurrencyReached:9
#: discord.ext.commands.Paginator:25 of
msgid ":class:`int`"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_destination:1
#: discord.ext.commands.HelpCommand.get_destination:1
#: discord.ext.commands.MinimalHelpCommand.get_destination:1 of
msgid ""
"Returns the :class:`~discord.abc.Messageable` where the help command will"
" be output."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_destination:3
#: discord.ext.commands.HelpCommand.get_destination:3
#: discord.ext.commands.HelpCommand.send_bot_help:11
#: discord.ext.commands.HelpCommand.send_cog_help:11
#: discord.ext.commands.HelpCommand.send_command_help:10
#: discord.ext.commands.HelpCommand.send_error_message:7
#: discord.ext.commands.HelpCommand.send_group_help:11
#: discord.ext.commands.MinimalHelpCommand.get_destination:3 of
msgid "You can override this method to customise the behaviour."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_destination:5
#: discord.ext.commands.HelpCommand.get_destination:5
#: discord.ext.commands.MinimalHelpCommand.get_destination:5 of
msgid "By default this returns the context's channel."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_destination:7
#: discord.ext.commands.HelpCommand.get_destination:7
#: discord.ext.commands.MinimalHelpCommand.get_destination:7 of
msgid "The destination where the help command will be output."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_destination:8
#: discord.ext.commands.HelpCommand.get_destination:8
#: discord.ext.commands.MinimalHelpCommand.get_destination:8 of
msgid ":class:`.abc.Messageable`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_error_message:3 of
msgid ""
"Handles the implementation when an error happens in the help command. For"
" example, the result of :meth:`command_not_found` or "
":meth:`command_has_no_subcommand_found` will be passed here."
msgstr ""

#: discord.ext.commands.HelpCommand.send_error_message:9 of
msgid ""
"By default, this sends the error message to the destination specified by "
":meth:`get_destination`."
msgstr ""

#: discord.ext.commands.HelpCommand.send_bot_help:15
#: discord.ext.commands.HelpCommand.send_cog_help:15
#: discord.ext.commands.HelpCommand.send_command_help:14
#: discord.ext.commands.HelpCommand.send_error_message:14
#: discord.ext.commands.HelpCommand.send_group_help:15 of
msgid "You can access the invocation context with :attr:`HelpCommand.context`."
msgstr ""

#: discord.ext.commands.HelpCommand.send_error_message:16 of
msgid ""
"The error message to display to the user. Note that this has had mentions"
" removed to prevent abuse."
msgstr ""

#: discord.ext.commands.HelpCommand.on_help_command_error:3 of
msgid ""
"The help command's error handler, as specified by "
":ref:`ext_commands_error_handler`."
msgstr ""

#: discord.ext.commands.HelpCommand.on_help_command_error:5 of
msgid ""
"Useful to override if you need some specific behaviour when the error "
"handler is called."
msgstr ""

#: discord.ext.commands.HelpCommand.on_help_command_error:8 of
msgid ""
"By default this method does nothing and just propagates to the default "
"error handlers."
msgstr ""

#: discord.ext.commands.HelpCommand.send_bot_help:3 of
msgid ""
"Handles the implementation of the bot command page in the help command. "
"This function is called when the help command is called with no "
"arguments."
msgstr ""

#: discord.ext.commands.HelpCommand.send_bot_help:6
#: discord.ext.commands.HelpCommand.send_cog_help:6
#: discord.ext.commands.HelpCommand.send_command_help:5
#: discord.ext.commands.HelpCommand.send_group_help:6 of
msgid ""
"It should be noted that this method does not return anything -- rather "
"the actual message sending should be done inside this method. Well "
"behaved subclasses should use :meth:`get_destination` to know where to "
"send, as this is a customisation point for other users."
msgstr ""

#: discord.ext.commands.HelpCommand.send_bot_help:17 of
msgid ""
"Also, the commands in the mapping are not filtered. To do the filtering "
"you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: discord.ext.commands.HelpCommand.send_bot_help:20 of
msgid ""
"A mapping of cogs to commands that have been requested by the user for "
"help. The key of the mapping is the :class:`~.commands.Cog` that the "
"command belongs to, or ``None`` if there isn't one, and the value is a "
"list of commands that belongs to that cog."
msgstr ""

#: discord.ext.commands.HelpCommand.send_cog_help:3 of
msgid ""
"Handles the implementation of the cog page in the help command. This "
"function is called when the help command is called with a cog as the "
"argument."
msgstr ""

#: discord.ext.commands.HelpCommand.send_cog_help:17 of
msgid ""
"To get the commands that belong to this cog see :meth:`Cog.get_commands`."
" The commands returned not filtered. To do the filtering you will have to"
" call :meth:`filter_commands` yourself."
msgstr ""

#: discord.ext.commands.HelpCommand.send_cog_help:21 of
msgid "The cog that was requested for help."
msgstr ""

#: discord.ext.commands.HelpCommand.send_group_help:3 of
msgid ""
"Handles the implementation of the group page in the help command. This "
"function is called when the help command is called with a group as the "
"argument."
msgstr ""

#: discord.ext.commands.HelpCommand.send_group_help:17 of
msgid ""
"To get the commands that belong to this group without aliases see "
":attr:`Group.commands`. The commands returned not filtered. To do the "
"filtering you will have to call :meth:`filter_commands` yourself."
msgstr ""

#: discord.ext.commands.HelpCommand.send_group_help:21 of
msgid "The group that was requested for help."
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:3 of
msgid "Handles the implementation of the single command page in the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:16 of
msgid "Showing Help"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:19 of
msgid ""
"There are certain attributes and methods that are helpful for a help "
"command to show such as the following:"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:22 of
msgid ":attr:`Command.help`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:23 of
msgid ":attr:`Command.brief`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:24 of
msgid ":attr:`Command.short_doc`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:25 of
msgid ":attr:`Command.description`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:26 of
msgid ":meth:`get_command_signature`"
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:28 of
msgid ""
"There are more than just these attributes but feel free to play around "
"with these to help you get started to get the output that you want."
msgstr ""

#: discord.ext.commands.HelpCommand.send_command_help:31 of
msgid "The command that was requested for help."
msgstr ""

#: discord.ext.commands.HelpCommand.prepare_help_command:3 of
msgid ""
"A low level method that can be used to prepare the help command before it"
" does anything. For example, if you need to prepare some state in your "
"subclass before the command does its processing then this would be the "
"place to do it."
msgstr ""

#: discord.ext.commands.HelpCommand.prepare_help_command:8
#: discord.ext.commands.MinimalHelpCommand.get_ending_note:3 of
msgid "The default implementation does nothing."
msgstr ""

#: discord.ext.commands.HelpCommand.prepare_help_command:12 of
msgid ""
"This is called *inside* the help command callback body. So all the usual "
"rules that happen inside apply here as well."
msgstr ""

#: discord.ext.commands.HelpCommand.prepare_help_command:17 of
msgid "The argument passed to the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:3 of
msgid "The actual implementation of the help command."
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:5 of
msgid ""
"It is not recommended to override this method and instead change the "
"behaviour through the methods that actually get dispatched."
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:8 of
msgid ":meth:`send_bot_help`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:9 of
msgid ":meth:`send_cog_help`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:10 of
msgid ":meth:`send_group_help`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:11 of
msgid ":meth:`send_command_help`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:12 of
msgid ":meth:`get_destination`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:13 of
msgid ":meth:`command_not_found`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:14 of
msgid ":meth:`subcommand_not_found`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:15 of
msgid ":meth:`send_error_message`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:16 of
msgid ":meth:`on_help_command_error`"
msgstr ""

#: discord.ext.commands.HelpCommand.command_callback:17 of
msgid ":meth:`prepare_help_command`"
msgstr ""

#: ../../ext/commands/api.rst:151
msgid "DefaultHelpCommand"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:1 of
msgid "The implementation of the default help command."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:3
#: discord.ext.commands.MinimalHelpCommand:3 of
msgid "This inherits from :class:`HelpCommand`."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:5 of
msgid "It extends it with the following attributes."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:9 of
msgid "The maximum number of characters that fit in a line. Defaults to 80."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:16
#: discord.ext.commands.MinimalHelpCommand:7 of
msgid ""
"Whether to sort the commands in the output alphabetically. Defaults to "
"``True``."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:22
#: discord.ext.commands.MinimalHelpCommand:27 of
msgid ""
"A tribool that indicates if the help command should DM the user instead "
"of sending it to the channel it received it from. If the boolean is set "
"to ``True``, then all help output is DM'd. If ``False``, none of the help"
" output is DM'd. If ``None``, then the bot will only DM when the help "
"message becomes too long (dictated by more than :attr:`dm_help_threshold`"
" characters). Defaults to ``False``."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:29
#: discord.ext.commands.MinimalHelpCommand:34 of
msgid "Optional[:class:`bool`]"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:33
#: discord.ext.commands.MinimalHelpCommand:38 of
msgid ""
"The number of characters the paginator must accumulate before getting "
"DM'd to the user if :attr:`dm_help` is set to ``None``. Defaults to 1000."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:40 of
msgid "How much to indent the commands from a heading. Defaults to ``2``."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:46 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands:\"``"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:53
#: discord.ext.commands.MinimalHelpCommand:45 of
msgid ""
"The string used when there is a command which does not belong to any "
"category(cog). Useful for i18n. Defaults to ``\"No Category\"``"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:60
#: discord.ext.commands.MinimalHelpCommand:52 of
msgid "The paginator used to paginate the help command output."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand:62
#: discord.ext.commands.MinimalHelpCommand:54 of
msgid ":class:`Paginator`"
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.shorten_text:1 of
msgid ":class:`str`: Shortens text to fit into the :attr:`width`."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.get_ending_note:1 of
msgid ""
":class:`str`: Returns help command's ending note. This is mainly useful "
"to override for i18n purposes."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:1 of
msgid "Indents a list of commands after the specified heading."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:3 of
msgid "The formatting is added to the :attr:`paginator`."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:5 of
msgid ""
"The default implementation is the command name indented by :attr:`indent`"
" spaces, padded to ``max_size`` followed by the command's "
":attr:`Command.short_doc` and then shortened to fit into the "
":attr:`width`."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:10 of
msgid "A list of commands to indent for output."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:12 of
msgid ""
"The heading to add to the output. This is only added if the list of "
"commands is greater than 0."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_indented_commands:15 of
msgid ""
"The max size to use for the gap between indents. If unspecified, calls "
":meth:`get_max_size` on the commands parameter."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.send_pages:1
#: discord.ext.commands.MinimalHelpCommand.send_pages:1 of
msgid ""
"A helper utility to send the page output from :attr:`paginator` to the "
"destination."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_command_formatting:1 of
msgid ""
"A utility function to format the non-indented block of commands and "
"groups."
msgstr ""

#: discord.ext.commands.DefaultHelpCommand.add_command_formatting:3
#: discord.ext.commands.MinimalHelpCommand.add_command_formatting:3 of
msgid "The command to format."
msgstr ""

#: ../../ext/commands/api.rst:160
msgid "MinimalHelpCommand"
msgstr ""

#: discord.ext.commands.MinimalHelpCommand:1 of
msgid "An implementation of a help command with minimal output."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand:13 of
msgid ""
"The command list's heading string used when the help command is invoked "
"with a category name. Useful for i18n. Defaults to ``\"Commands\"``"
msgstr ""

#: discord.ext.commands.MinimalHelpCommand:20 of
msgid ""
"The alias list's heading string used to list the aliases of the command. "
"Useful for i18n. Defaults to ``\"Aliases:\"``."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.get_opening_note:1 of
msgid ""
"Returns help command's opening note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.get_opening_note:3 of
msgid "The default implementation returns ::"
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.get_opening_note:8 of
msgid "The help command opening note."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.get_ending_note:1 of
msgid ""
"Return the help command's ending note. This is mainly useful to override "
"for i18n purposes."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.get_ending_note:5 of
msgid "The help command ending note."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:1 of
msgid "Adds the minified bot heading with commands to the output."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting:3
#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:3
#: discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:3 of
msgid "The formatting should be added to the :attr:`paginator`."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:5 of
msgid ""
"The default implementation is a bold underline heading followed by "
"commands separated by an EN SPACE (U+2002) in the next line."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:8 of
msgid "A list of commands that belong to the heading."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_bot_commands_formatting:10 of
msgid "The heading to add to the line."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:1 of
msgid "Adds formatting information on a subcommand."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:5 of
msgid ""
"The default implementation is the prefix and the "
":attr:`Command.qualified_name` optionally followed by an En dash and the "
"command's :attr:`Command.short_doc`."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_subcommand_formatting:8 of
msgid "The command to show information of."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting:1 of
msgid "Adds the formatting information on a command's aliases."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting:5 of
msgid ""
"The default implementation is the :attr:`aliases_heading` bolded followed"
" by a comma separated list of aliases."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting:8 of
msgid "This is not called if there are no aliases to format."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_aliases_formatting:10 of
msgid "A list of aliases to format."
msgstr ""

#: discord.ext.commands.MinimalHelpCommand.add_command_formatting:1 of
msgid "A utility function to format commands and groups."
msgstr ""

#: ../../ext/commands/api.rst:169
msgid "Paginator"
msgstr ""

#: discord.ext.commands.Paginator:1 of
msgid "A class that aids in paginating code blocks for Discord messages."
msgstr ""

#: discord.ext.commands.Paginator:7 of
msgid "Returns the total number of characters in the paginator."
msgstr ""

#: discord.ext.commands.Paginator:11 of
msgid "The prefix inserted to every page. e.g. three backticks."
msgstr ""

#: discord.ext.commands.Paginator:17 of
msgid "The suffix appended at the end of every page. e.g. three backticks."
msgstr ""

#: discord.ext.commands.Paginator:23 of
msgid "The maximum amount of codepoints allowed in a page."
msgstr ""

#: discord.ext.commands.Paginator.clear:1 of
msgid "Clears the paginator to have no pages."
msgstr ""

#: discord.ext.commands.Paginator.add_line:1 of
msgid "Adds a line to the current page."
msgstr ""

#: discord.ext.commands.Paginator.add_line:3 of
msgid "If the line exceeds the :attr:`max_size` then an exception is raised."
msgstr ""

#: discord.ext.commands.Paginator.add_line:6 of
msgid "The line to add."
msgstr ""

#: discord.ext.commands.Paginator.add_line:8 of
msgid "Indicates if another empty line should be added."
msgstr ""

#: discord.ext.commands.Paginator.add_line:11 of
msgid "The line was too big for the current :attr:`max_size`."
msgstr ""

#: discord.ext.commands.Paginator.close_page:1 of
msgid "Prematurely terminate a page."
msgstr ""

#: discord.ext.commands.Paginator.pages:1 of
msgid "Returns the rendered list of pages."
msgstr ""

#: discord.ext.commands.Paginator.pages:3 of
msgid "List[:class:`str`]"
msgstr ""

#: ../../ext/commands/api.rst:177
msgid "Enums"
msgstr ""

#: ../../ext/commands/api.rst:181
msgid "Specifies a type of bucket for, e.g. a cooldown."
msgstr ""

#: ../../ext/commands/api.rst:185
msgid "The default bucket operates on a global basis."
msgstr ""

#: ../../ext/commands/api.rst:188
msgid "The user bucket operates on a per-user basis."
msgstr ""

#: ../../ext/commands/api.rst:191
msgid "The guild bucket operates on a per-guild basis."
msgstr ""

#: ../../ext/commands/api.rst:194
msgid "The channel bucket operates on a per-channel basis."
msgstr ""

#: ../../ext/commands/api.rst:197
msgid "The member bucket operates on a per-member basis."
msgstr ""

#: ../../ext/commands/api.rst:200
msgid "The category bucket operates on a per-category basis."
msgstr ""

#: ../../ext/commands/api.rst:203
msgid "The role bucket operates on a per-role basis."
msgstr ""

#: ../../ext/commands/api.rst:211
msgid "Checks"
msgstr ""

#: discord.ext.commands.check:1 of
msgid ""
"A decorator that adds a check to the :class:`.Command` or its subclasses."
" These checks could be accessed via :attr:`.Command.checks`."
msgstr ""

#: discord.ext.commands.check:4 of
msgid ""
"These checks should be predicates that take in a single parameter taking "
"a :class:`.Context`. If the check returns a ``False``\\-like value then "
"during invocation a :exc:`.CheckFailure` exception is raised and sent to "
"the :func:`.on_command_error` event."
msgstr ""

#: discord.ext.commands.check:9 of
msgid ""
"If an exception should be thrown in the predicate then it should be a "
"subclass of :exc:`.CommandError`. Any exception not subclassed from it "
"will be propagated while those subclassed will be sent to "
":func:`.on_command_error`."
msgstr ""

#: discord.ext.commands.check:14 of
msgid ""
"A special attribute named ``predicate`` is bound to the value returned by"
" this decorator to retrieve the predicate passed to the decorator. This "
"allows the following introspection and chaining to be done:"
msgstr ""

#: discord.ext.commands.check:30 of
msgid ""
"The function returned by ``predicate`` is **always** a coroutine, even if"
" the original function was not a coroutine."
msgstr ""

#: discord.ext.commands.check:33 of
msgid "The ``predicate`` attribute was added."
msgstr ""

#: discord.ext.commands.check:38 of
msgid "Creating a basic check to see if the command invoker is you."
msgstr ""

#: discord.ext.commands.check:50 of
msgid "Transforming common checks into its own decorator:"
msgstr ""

#: discord.ext.commands.check:64 of
msgid "The predicate to check if the command should be invoked."
msgstr ""

#: discord.ext.commands.check_any:1 of
msgid ""
"A :func:`check` that is added that checks if any of the checks passed "
"will pass, i.e. using logical OR."
msgstr ""

#: discord.ext.commands.check_any:4 of
msgid ""
"If all checks fail then :exc:`.CheckAnyFailure` is raised to signal the "
"failure. It inherits from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.check_any:9 of
msgid "The ``predicate`` attribute for this function **is** a coroutine."
msgstr ""

#: discord.ext.commands.check_any:13 of
msgid ""
"An argument list of checks that have been decorated with the "
":func:`check` decorator."
msgstr ""

#: discord.ext.commands.check_any:17 of
msgid ""
"A check passed has not been decorated with the :func:`check`     "
"decorator."
msgstr ""

#: discord.ext.commands.check_any:21 of
msgid "Creating a basic check to see if it's the bot owner or the server owner:"
msgstr ""

#: discord.ext.commands.has_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has the role specified via the name or ID specified."
msgstr ""

#: discord.ext.commands.has_role:4 of
msgid ""
"If a string is specified, you must give the exact name of the role, "
"including caps and spelling."
msgstr ""

#: discord.ext.commands.has_role:7 of
msgid ""
"If an integer is specified, you must give the exact snowflake ID of the "
"role."
msgstr ""

#: discord.ext.commands.has_role:9 of
msgid ""
"If the message is invoked in a private message context then the check "
"will return ``False``."
msgstr ""

#: discord.ext.commands.has_role:12 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingRole` if "
"the user is missing a role, or :exc:`.NoPrivateMessage` if it is used in "
"a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.has_role:18 of
msgid ""
"Raise :exc:`.MissingRole` or :exc:`.NoPrivateMessage` instead of generic "
":exc:`.CheckFailure`"
msgstr ""

#: discord.ext.commands.has_role:21 of
msgid "The name or ID of the role to check."
msgstr ""

#: discord.ext.commands.has_permissions:1 of
msgid ""
"A :func:`.check` that is added that checks if the member has all of the "
"permissions necessary."
msgstr ""

#: discord.ext.commands.has_permissions:4 of
msgid ""
"Note that this check operates on the current channel permissions, not the"
" guild wide permissions."
msgstr ""

#: discord.ext.commands.has_permissions:7 of
msgid ""
"The permissions passed in must be exactly like the properties shown under"
" :class:`.discord.Permissions`."
msgstr ""

#: discord.ext.commands.has_permissions:10 of
msgid ""
"This check raises a special exception, :exc:`.MissingPermissions` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.has_permissions:13 of
msgid "An argument list of permissions to check for."
msgstr ""

#: discord.ext.commands.has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions`, but operates on guild wide "
"permissions instead of the current channel permissions."
msgstr ""

#: discord.ext.commands.has_guild_permissions:4 of
msgid ""
"If this check is called in a DM context, it will raise an exception, "
":exc:`.NoPrivateMessage`."
msgstr ""

#: discord.ext.commands.has_any_role:1 of
msgid ""
"A :func:`.check` that is added that checks if the member invoking the "
"command has **any** of the roles specified. This means that if they have "
"one out of the three roles specified, then this check will return `True`."
msgstr ""

#: discord.ext.commands.has_any_role:5 of
msgid "Similar to :func:`.has_role`\\, the names or IDs passed in must be exact."
msgstr ""

#: discord.ext.commands.has_any_role:7 of
msgid ""
"This check raises one of two special exceptions, :exc:`.MissingAnyRole` "
"if the user is missing all roles, or :exc:`.NoPrivateMessage` if it is "
"used in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.has_any_role:13 of
msgid ""
"Raise :exc:`.MissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: discord.ext.commands.has_any_role:16 of
msgid "An argument list of names or IDs to check that the member has roles wise."
msgstr ""

#: discord.ext.commands.bot_has_role:1 of
msgid "Similar to :func:`.has_role` except checks if the bot itself has the role."
msgstr ""

#: discord.ext.commands.bot_has_role:4 of
msgid ""
"This check raises one of two special exceptions, :exc:`.BotMissingRole` "
"if the bot is missing the role, or :exc:`.NoPrivateMessage` if it is used"
" in a private message. Both inherit from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.bot_has_role:10 of
msgid ""
"Raise :exc:`.BotMissingRole` or :exc:`.NoPrivateMessage` instead of "
"generic :exc:`.CheckFailure`"
msgstr ""

#: discord.ext.commands.bot_has_permissions:1 of
msgid ""
"Similar to :func:`.has_permissions` except checks if the bot itself has "
"the permissions listed."
msgstr ""

#: discord.ext.commands.bot_has_permissions:4 of
msgid ""
"This check raises a special exception, :exc:`.BotMissingPermissions` that"
" is inherited from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.bot_has_guild_permissions:1 of
msgid ""
"Similar to :func:`.has_guild_permissions`, but checks the bot members "
"guild permissions."
msgstr ""

#: discord.ext.commands.bot_has_any_role:1 of
msgid ""
"Similar to :func:`.has_any_role` except checks if the bot itself has any "
"of the roles listed."
msgstr ""

#: discord.ext.commands.bot_has_any_role:4 of
msgid ""
"This check raises one of two special exceptions, "
":exc:`.BotMissingAnyRole` if the bot is missing all roles, or "
":exc:`.NoPrivateMessage` if it is used in a private message. Both inherit"
" from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.bot_has_any_role:10 of
msgid ""
"Raise :exc:`.BotMissingAnyRole` or :exc:`.NoPrivateMessage` instead of "
"generic checkfailure"
msgstr ""

#: discord.ext.commands.cooldown:1 of
msgid "A decorator that adds a cooldown to a :class:`.Command`"
msgstr ""

#: discord.ext.commands.cooldown:3 of
msgid ""
"A cooldown allows a command to only be used a specific amount of times in"
" a specific time frame. These cooldowns can be based either on a per-"
"guild, per-channel, per-user, per-role or global basis. Denoted by the "
"third argument of ``type`` which must be of enum type "
":class:`.BucketType`."
msgstr ""

#: discord.ext.commands.cooldown:9 of
msgid ""
"If a cooldown is triggered, then :exc:`.CommandOnCooldown` is triggered "
"in :func:`.on_command_error` and the local error handler."
msgstr ""

#: discord.ext.commands.cooldown:12 of
msgid "A command can only have a single cooldown."
msgstr ""

#: discord.ext.commands.cooldown:14 of
msgid "The number of times a command can be used before triggering a cooldown."
msgstr ""

#: discord.ext.commands.cooldown:16 of
msgid "The amount of seconds to wait for a cooldown when it's been triggered."
msgstr ""

#: discord.ext.commands.cooldown:18 of
msgid "The type of cooldown to have."
msgstr ""

#: discord.ext.commands.max_concurrency:1 of
msgid ""
"A decorator that adds a maximum concurrency to a :class:`.Command` or its"
" subclasses."
msgstr ""

#: discord.ext.commands.max_concurrency:3 of
msgid ""
"This enables you to only allow a certain number of command invocations at"
" the same time, for example if a command takes too long or if only one "
"user can use it at a time. This differs from a cooldown in that there is "
"no set waiting period or token bucket -- only a set number of people can "
"run the command."
msgstr ""

#: discord.ext.commands.max_concurrency:10 of
msgid ""
"The maximum number of invocations of this command that can be running at "
"the same time."
msgstr ""

#: discord.ext.commands.max_concurrency:12 of
msgid ""
"The bucket that this concurrency is based on, e.g. ``BucketType.guild`` "
"would allow it to be used up to ``number`` times per guild."
msgstr ""

#: discord.ext.commands.max_concurrency:15 of
msgid ""
"Whether the command should wait for the queue to be over. If this is set "
"to ``False`` then instead of waiting until the command can run again, the"
" command raises :exc:`.MaxConcurrencyReached` to its error handler. If "
"this is set to ``True`` then the command waits until it can be executed."
msgstr ""

#: discord.ext.commands.before_invoke:3 of
msgid ""
"This allows you to refer to one before invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: discord.ext.commands.after_invoke:3 of
msgid ""
"This allows you to refer to one after invoke hook for several commands "
"that do not have to be within the same cog."
msgstr ""

#: discord.ext.commands.guild_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a guild"
" context only. Basically, no private messages are allowed when using the "
"command."
msgstr ""

#: discord.ext.commands.guild_only:5 of
msgid ""
"This check raises a special exception, :exc:`.NoPrivateMessage` that is "
"inherited from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.dm_only:1 of
msgid ""
"A :func:`.check` that indicates this command must only be used in a DM "
"context. Only private messages are allowed when using the command."
msgstr ""

#: discord.ext.commands.dm_only:5 of
msgid ""
"This check raises a special exception, :exc:`.PrivateMessageOnly` that is"
" inherited from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.is_owner:1 of
msgid ""
"A :func:`.check` that checks if the person invoking this command is the "
"owner of the bot."
msgstr ""

#: discord.ext.commands.is_owner:4 of
msgid "This is powered by :meth:`.Bot.is_owner`."
msgstr ""

#: discord.ext.commands.is_owner:6 of
msgid ""
"This check raises a special exception, :exc:`.NotOwner` that is derived "
"from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.is_nsfw:1 of
msgid "A :func:`.check` that checks if the channel is a NSFW channel."
msgstr ""

#: discord.ext.commands.is_nsfw:3 of
msgid ""
"This check raises a special exception, :exc:`.NSFWChannelRequired` that "
"is derived from :exc:`.CheckFailure`."
msgstr ""

#: discord.ext.commands.is_nsfw:8 of
msgid ""
"Raise :exc:`.NSFWChannelRequired` instead of generic "
":exc:`.CheckFailure`. DM channels will also now pass this check."
msgstr ""

#: ../../ext/commands/api.rst:252
msgid "Context"
msgstr "컨텍스트"

#: discord.ext.commands.Context:1 of
msgid "Represents the context in which a command is being invoked under."
msgstr "명령어가 실행되고 있는 컨텍스트를 나타냅니다."

#: discord.ext.commands.Context:3 of
msgid ""
"This class contains a lot of meta data to help you understand more about "
"the invocation context. This class is not created manually and is instead"
" passed around to commands as the first parameter."
msgstr ""
"이 클래스는 호출 컨텍스트를 더 잘 이해하는 것을 도와주기 위해 여러가지 메타 데이터가 들어가있습니다. 이 클래스는 수동으로 "
"생성되지 않는 대신 명령어의 첫 매개변수로 전달됩니다."

#: discord.ext.commands.Context:7 of
msgid "This class implements the :class:`~discord.abc.Messageable` ABC."
msgstr "이 클래스는 :class:`~discord.abc.Messageable` ABC를 구현합니다."

#: discord.ext.commands.Context:11 of
msgid "The message that triggered the command being executed."
msgstr "명령어를 실행시킨 메시지."

#: discord.ext.commands.Context:13 of
msgid ":class:`.Message`"
msgstr ""

#: discord.ext.commands.Context:17 of
msgid "The bot that contains the command being executed."
msgstr "실행되고 있는 명령어를 갖고 있는 봇."

#: discord.ext.commands.Context:19 of
msgid ":class:`.Bot`"
msgstr ""

#: discord.ext.commands.Context:23 of
msgid ""
"The list of transformed arguments that were passed into the command. If "
"this is accessed during the :func:`on_command_error` event then this list"
" could be incomplete."
msgstr ""
"명령어로 전달된 변환된 전달인자들의 리스트. 만약에 이것이 :func:`on_command_error` 이벤트 도중에 접근된 경우 "
"이 리스트는 불완전할 수 있습니다."

#: discord.ext.commands.BotMissingPermissions:10
#: discord.ext.commands.Context:27 discord.ext.commands.MissingPermissions:10
#: of
msgid ":class:`list`"
msgstr ""

#: discord.ext.commands.Context:31 of
msgid ""
"A dictionary of transformed arguments that were passed into the command. "
"Similar to :attr:`args`\\, if this is accessed in the "
":func:`on_command_error` event then this dict could be incomplete."
msgstr ""
"명령어로 전달된 변환된 전달인자들의 딕셔너리. :attr:`args`\\와 비슷하게, 만약에 이것이 "
":func:`on_command_error` 이벤트 도중에 접근된 경우 이 딕셔너리는 불완전할 수 있습니다."

#: discord.ext.commands.Context:39 of
msgid "The prefix that was used to invoke the command."
msgstr "명령어를 작동시키기 위해 사용된 프리픽스."

#: discord.ext.commands.Context:45 of
#, fuzzy
msgid "The command that is being invoked currently."
msgstr "현재 작동중인 명령어."

#: discord.ext.commands.Context:51 of
msgid ""
"The command name that triggered this invocation. Useful for finding out "
"which alias called the command."
msgstr "이것을 호출한 명령어의 이름. 어떤 에일리어스가 이 명령어를 호출했는지 확인할 때 유용합니다."

#: discord.ext.commands.Context:58 of
#, fuzzy
msgid ""
"The subcommand that was invoked. If no valid subcommand was invoked then "
"this is equal to ``None``."
msgstr "호출된 서브커맨드. 만약에 서브커맨드가 호출되지 않았다면 이것은 ``None``\\과 동일합니다."

#: discord.ext.commands.Context:65 of
msgid ""
"The string that was attempted to call a subcommand. This does not have to"
" point to a valid registered subcommand and could just point to a "
"nonsense string. If nothing was passed to attempt a call to a subcommand "
"then this is set to ``None``."
msgstr ""
"서브커맨드 호출을 시도하기 위해 사용된 문자열. 이것은 항상 유효한 등록된 서브커맨드를 가리키지 않고 의미없는 문자열일 수 "
"있습니다. 만약에 서브커맨드 호출을 시도하기 위해 아무것도 사용되지 않았다면 이것은 ``None``\\입니다."

#: discord.ext.commands.Context:74 of
msgid ""
"A boolean that indicates if the command failed to be parsed, checked, or "
"invoked."
msgstr "명령어가 분석됐거나, 체크됐거나, 호출되는 것이 실패했는지 보여주는 불린."

#: discord.ext.commands.Context.history:1 of
msgid ""
"Returns an :class:`~discord.AsyncIterator` that enables receiving the "
"destination's message history."
msgstr "목적지의 메시지 역사를 받을 수 있도록 활성화해주는 :class:`~discord.AsyncIterator`\\를 반환."

#: discord.ext.commands.Context.history:3 of
msgid ""
"You must have :attr:`~Permissions.read_message_history` permissions to "
"use this."
msgstr "이것을 사용하기 위해서는 :attr:`~Permissions.read_message_history` 권한이 필요합니다."

#: discord.ext.commands.Context.history:14 of
msgid "Flattening into a list: ::"
msgstr "리스트로 압축하기: ::"

#: discord.ext.commands.Context.history:21 of
msgid ""
"The number of messages to retrieve. If ``None``, retrieves every message "
"in the channel. Note, however, that this would make it a slow operation."
msgstr ""
"검색할 메시지의 개수. 만약에 ``None`` 이라면, 이 채널의 모든 메시지를 검색합니다. 그러나, 참고로, 그렇게 한다면 느리게"
" 작동할 수 있습니다."

#: discord.ext.commands.Context.history:25 of
msgid ""
"Retrieve messages before this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""
"이 시간이나 메시지 이전의 메시지들을 검색. 만약에 시간이라면 UTC 시간대인 timezone-naive datetime 이어야 "
"합니다."

#: discord.ext.commands.Context.history:28 of
msgid ""
"Retrieve messages after this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time."
msgstr ""
"이 시간이나 메시지 이후의 메시지들을 검색. 만약에 시간이라면 UTC 시간대인 timezone-naive datetime 이어야 "
"합니다."

#: discord.ext.commands.Context.history:31 of
msgid ""
"Retrieve messages around this date or message. If a date is provided it "
"must be a timezone-naive datetime representing UTC time. When using this "
"argument, the maximum limit is 101. Note that if the limit is an even "
"number then this will return at most limit + 1 messages."
msgstr ""
"이 시간이나 메시지 근처의 메시지들을 검색. 만약에 시간이라면 UTC 시간대인 timezone-naive datetime 이어야 "
"합니다. 이 전달인자를 사용할 때에는, 최대 제한이 101 입니다. 참고로 제한이 짝수라면 제한 + 1개 메시지들을 반환합니다."

#: discord.ext.commands.Context.history:36 of
msgid ""
"If set to ``True``, return messages in oldest->newest order. Defaults to "
"``True`` if ``after`` is specified, otherwise ``False``."
msgstr ""
"만약에 ``True``\\로 설정되었다면 메시지를 오래된->최신 순으로 반환합니다. 기본값은 ``after``\\가 설정되있다면 "
"``True``\\이고, 아니라면 ``False`` 입니다."

#: discord.ext.commands.Context.history:40 of
msgid "You do not have permissions to get channel message history."
msgstr "채널 메시지 역사를 가져올 권한이 없습니다."

#: discord.ext.commands.Context.history:41 of
msgid "The request to get message history failed."
msgstr "메시지 역사 요청이 실패했습니다."

#: discord.ext.commands.Context.history:43 of
msgid ":class:`~discord.Message` -- The message with the message data parsed."
msgstr ":class:`~discord.Message` -- 파싱된 메시지 데이터가 들어있는 메시지 객체"

#: discord.ext.commands.Context.typing:1 of
msgid ""
"Returns a context manager that allows you to type for an indefinite "
"period of time."
msgstr "제한되지 않은 시간동안 입력할 수 있도록 하는 컨텍스트 매니저를 반환."

#: discord.ext.commands.Context.typing:3 of
msgid "This is useful for denoting long computations in your bot."
msgstr "이것은 봇이 오랫동안 계산 등을 할 때 유용합니다."

#: discord.ext.commands.Context.typing:7 of
msgid ""
"This is both a regular context manager and an async context manager. This"
" means that both ``with`` and ``async with`` work with this."
msgstr ""
"이것은 평범한 컨텍스트 매니저이기도 하고 비동기 컨텍스트 매니저이기도 합니다. 이 말은 ``with``\\와 ``async "
"with`` 둘다 가능하다는 뜻입니다."

#: discord.ext.commands.Context.typing:10 of
msgid "Example Usage: ::"
msgstr "예제: ::"

#: discord.ext.commands.Context.invoke:3 of
msgid "Calls a command with the arguments given."
msgstr "주어진 인자들과 함께 명령어를 불러옵니다."

#: discord.ext.commands.Context.invoke:5 of
msgid ""
"This is useful if you want to just call the callback that a "
":class:`.Command` holds internally."
msgstr "이것은 내부에서 :class:`.Command`\\을 잡고 있는 콜백을 호출하고 싶다면 유용합니다."

#: discord.ext.commands.Context.invoke:10 of
msgid ""
"This does not handle converters, checks, cooldowns, pre-invoke, or after-"
"invoke hooks in any matter. It calls the internal callback directly as-if"
" it was a regular function."
msgstr ""
"이것은 어떤 일이 일어나도 컨버터, 체크, 쿨다운, 프리-인보크, 또는 애프터-인보크 후크들을 핸들링하지 않습니다.이것은 내부 "
"콜백을 일반 함수처럼 직접 호출합니다."

#: discord.ext.commands.Context.invoke:14 of
msgid ""
"You must take care in passing the proper arguments when using this "
"function."
msgstr "이 함수를 사용할 때에는 제대로 된 인자들을 전달할 때 조심해야 합니다."

#: discord.ext.commands.Context.invoke:19 of
msgid "The first parameter passed **must** be the command being invoked."
msgstr "첫번째로 전달된 인자는 **무조건** 실행된 명령어 이어야 합니다."

#: discord.ext.commands.Context.invoke:21 of
msgid "The command that is going to be called."
msgstr "호출될 명령어."

#: discord.ext.commands.Context.invoke:23 of
msgid "The arguments to to use."
msgstr "사용할 인자들"

#: discord.ext.commands.Context.invoke:24 of
msgid "The keyword arguments to use."
msgstr "사용할 키워드 인자들"

#: discord.ext.commands.Context.invoke:26 of
msgid "The command argument to invoke is missing."
msgstr "실행될 명령어 인자가 없습니다."

#: discord.ext.commands.Context.reinvoke:3 of
msgid "Calls the command again."
msgstr "명령어를 다시 호출합니다."

#: discord.ext.commands.Context.reinvoke:5 of
msgid ""
"This is similar to :meth:`~.Context.invoke` except that it bypasses "
"checks, cooldowns, and error handlers."
msgstr "이것은 체크, 쿨다운, 그리고 에러 핸들러들을 무시한다는 점을 뺀다면 :meth:`~.Context.invoke`\\와 비슷합니다."

#: discord.ext.commands.Context.reinvoke:10 of
msgid ""
"If you want to bypass :exc:`.UserInputError` derived exceptions, it is "
"recommended to use the regular :meth:`~.Context.invoke` as it will work "
"more naturally. After all, this will end up using the old arguments the "
"user has used and will thus just fail again."
msgstr ""
"만약에 :exc:`.UserInputError`\\에서 파생된 예외를 무시하고 싶다면, 기본적인 "
":meth:`~.Context.invoke`\\를 사용하는 것을 추천하는데 더 자연스럽게 작동하기 때문입니다. 어쨌든, 이 함수는 "
"유저가 기존에 사용했던 오래된 인자들을 재사용하게 될 것이고 결국 명령어 실행이 다시 실패할 것입니다."

#: discord.ext.commands.Context.reinvoke:16 of
msgid "Whether to call the before and after invoke hooks."
msgstr "명령어 실행 이전 또는 이후의 후크를 호출할 것인지의 여부."

#: discord.ext.commands.Context.reinvoke:18 of
msgid ""
"Whether to start the call chain from the very beginning or where we left "
"off (i.e. the command that caused the error). The default is to start "
"where we left off."
msgstr "콜 체인을 완전 처음부터 또는 멈춘 시점부터(예를 들면 오류를 일으킨 명령어) 시작할 것인지의 여부. 기본값은 멈춘 시점부터 입니다."

#: discord.ext.commands.Context.reinvoke:23 of
msgid "The context to reinvoke is not valid."
msgstr "재실행할 컨텍스트가 잘못되었습니다."

#: discord.ext.commands.Context.valid:1 of
msgid "Checks if the invocation context is valid to be invoked with."
msgstr "실행 컨텍스트가 실행될 수 있는지 확인."

#: discord.ext.commands.Context.cog:1 of
msgid ""
"Returns the cog associated with this context's command. None if it does "
"not exist."
msgstr "이 컨텍스트의 명령어와 연관된 Cog를 반환. 존재하지 않는다면 None 입니다."

#: discord.ext.commands.Context.cog:3 of
msgid ":class:`.Cog`"
msgstr ""

#: discord.ext.commands.Context.guild:1 of
msgid ""
"Returns the guild associated with this context's command. None if not "
"available."
msgstr "이 컨텍스트의 명령어와 연관된 길드를 반환. 사용할 수 없다면 None 입니다."

#: discord.ext.commands.Context.channel:1 of
msgid ""
":class:`.TextChannel`: Returns the channel associated with this context's"
" command. Shorthand for :attr:`.Message.channel`."
msgstr ""
":class:`.TextChannel`: 이 컨텍스트의 명령어와 연관된 채널을 반환. "
":attr:`.Message.channel`\\을 단축한 것입니다."

#: discord.ext.commands.Context.author:1 of
msgid ""
"Union[:class:`~discord.User`, :class:`.Member`]: Returns the author "
"associated with this context's command. Shorthand for "
":attr:`.Message.author`"
msgstr ""
"Union[:class:`~discord.User`, :class:`.Member`]: 이 컨텍스트의 명령어와 연관된 메시지 "
"작성자를 반환. :attr:`.Message.author`\\를 단축한 것입니다."

#: discord.ext.commands.Context.me:1 of
msgid ""
"Union[:class:`.Member`, :class:`.ClientUser`]: Similar to "
":attr:`.Guild.me` except it may return the :class:`.ClientUser` in "
"private message contexts."
msgstr ""
"Union[:class:`.Member`, :class:`.ClientUser`]: 개인 메시지 컨텍스트일 경우 "
":class:`.ClientUser`\\를 반환할 수 있다는 점만 제외한다면 :attr:`.Guild.me`\\와 비슷합니다."

#: discord.ext.commands.Context.voice_client:1 of
msgid "A shortcut to :attr:`.Guild.voice_client`\\, if applicable."
msgstr "사용할 수 있다면 :attr:`.Guild.voice_client`\\의 단축입니다."

#: discord.ext.commands.Context.voice_client:3 of
#, fuzzy
msgid "Optional[:class:`.VoiceProtocol`]"
msgstr "Optional[:class:`.VoiceClient`]"

#: discord.ext.commands.Context.send_help:3 of
msgid ""
"Shows the help command for the specified entity if given. The entity can "
"be a command or a cog."
msgstr "만약에 주어졌다면 특정한 개체에 대한 도움말 명령어를 보여줍니다. 개체는 명령어나 cog일 수 있습니다."

#: discord.ext.commands.Context.send_help:6 of
msgid "If no entity is given, then it'll show help for the entire bot."
msgstr "만약에 개체가 주어지지 않았다면, 봇 전체에 대한 도움말을 보여줍니다."

#: discord.ext.commands.Context.send_help:9 of
msgid ""
"If the entity is a string, then it looks up whether it's a :class:`Cog` "
"or a :class:`Command`."
msgstr "만약에 개체가 문자열이라면, :class:`Cog`\\인지 :class:`Command`\\인지 확인합니다."

#: discord.ext.commands.Context.send_help:14 of
msgid ""
"Due to the way this function works, instead of returning something "
"similar to :meth:`~.commands.HelpCommand.command_not_found` this returns "
":class:`None` on bad input or no help command."
msgstr ""
"이 함수가 작동되는 방식 때문에 :meth:`~.commands.HelpCommand.command_not_found`\\와 같은 "
"것을 반환하는 대신 입력이 잘못됬다거나 도움말 명령어가 없는 경우 :class:`None`\\을 반환합니다."

#: discord.ext.commands.Context.send_help:18 of
msgid "The entity to show help for."
msgstr "도움말을 보여줘야 할 개체."

#: discord.ext.commands.Context.send_help:21 of
msgid "The result of the help command, if any."
msgstr "만약에 있다면 도움말 명령어의 결과."

#: discord.ext.commands.Context.reply:3 of
msgid ""
"A shortcut method to :meth:`abc.Messageable.send` to reply to the "
":class:`Message`."
msgstr ""

#: discord.ext.commands.Context.reply:8 discord.ext.commands.Context.send:55 of
msgid "Sending the message failed."
msgstr "메시지 전송에 실패했습니다."

#: discord.ext.commands.Context.reply:9 discord.ext.commands.Context.send:56 of
msgid "You do not have the proper permissions to send the message."
msgstr "메시지를 전송하기 위해 필요한 권한들이 없습니다."

#: discord.ext.commands.Context.reply:10 of
msgid ""
"The ``files`` list is not of the appropriate size or     you specified "
"both ``file`` and ``files``."
msgstr "``files`` 리스트가 적절한 크기가 아니거나 ``file``\\과 ``files`` 둘 다 사용되었습니다."

#: discord.ext.commands.Context.reply:12 discord.ext.commands.Context.send:59
#: of
msgid "The message that was sent."
msgstr "보내진 메시지."

#: discord.ext.commands.Context.reply:13 of
msgid ":class:`Message`"
msgstr ""

#: discord.ext.commands.Context.fetch_message:3 of
msgid "Retrieves a single :class:`~discord.Message` from the destination."
msgstr "목적지에서 단일 :class:`~discord.Message`\\를 갖고옵니다."

#: discord.ext.commands.Context.fetch_message:5 of
msgid "This can only be used by bot accounts."
msgstr "이것은 봇 계정으로만 사용할 수 있습니다."

#: discord.ext.commands.Context.fetch_message:7 of
msgid "The message ID to look for."
msgstr "찾아야 하는 메시지 ID."

#: discord.ext.commands.Context.fetch_message:10 of
msgid "The specified message was not found."
msgstr "특정 메시지를 찾을 수 없습니다."

#: discord.ext.commands.Context.fetch_message:11 of
msgid "You do not have the permissions required to get a message."
msgstr "메시지를 갖고오기 위해 필요한 권한이 없습니다."

#: discord.ext.commands.Context.fetch_message:12 of
msgid "Retrieving the message failed."
msgstr "메시지 검색에 실패했습니다."

#: discord.ext.commands.Context.fetch_message:14 of
msgid "The message asked for."
msgstr "찾으라고 한 메시지."

#: discord.ext.commands.Context.fetch_message:15
#: discord.ext.commands.Context.send:60 of
msgid ":class:`~discord.Message`"
msgstr ""

#: discord.ext.commands.Context.pins:3 of
msgid "Retrieves all messages that are currently pinned in the channel."
msgstr "채널에 고정되어있는 모든 메시지들을 검색합니다."

#: discord.ext.commands.Context.pins:7 of
msgid ""
"Due to a limitation with the Discord API, the :class:`.Message` objects "
"returned by this method do not contain complete "
":attr:`.Message.reactions` data."
msgstr ""
"디스코드 API의 한계때문에, 이 함수로 반환된 :class:`.Message` 객체들은 "
":attr:`.Message.reactions` 데이터가 불완전하게 들어가있습니다."

#: discord.ext.commands.Context.pins:11 of
msgid "Retrieving the pinned messages failed."
msgstr "고정된 메시지 검색에 실패했습니다."

#: discord.ext.commands.Context.pins:13 of
msgid "The messages that are currently pinned."
msgstr "현재 고정되어있는 메시지들."

#: discord.ext.commands.Context.pins:14 of
msgid "List[:class:`~discord.Message`]"
msgstr ""

#: discord.ext.commands.Context.send:3 of
msgid "Sends a message to the destination with the content given."
msgstr "주어진 내용과 함께 목적지로 메시지를 보냅니다."

#: discord.ext.commands.Context.send:5 of
msgid ""
"The content must be a type that can convert to a string through "
"``str(content)``. If the content is set to ``None`` (the default), then "
"the ``embed`` parameter must be provided."
msgstr ""
"내용은 ``str(content)``\\를 통해 문자열로 전환될 수 있는 타입이어야 합니다. 만약에 내용이 ``None`` "
"(기본값)으로 설정되어있다면, ``embed`` 매개 변수가 주어져야 합니다."

#: discord.ext.commands.Context.send:9 of
msgid ""
"To upload a single file, the ``file`` parameter should be used with a "
"single :class:`~discord.File` object. To upload multiple files, the "
"``files`` parameter should be used with a :class:`list` of "
":class:`~discord.File` objects. **Specifying both parameters will lead to"
" an exception**."
msgstr ""
"단일 파일을 업로드하기 위해서는, ``file`` 매개변수가 단일 :class:`~discord.File` 객체와 함께 사용되어야 "
"합니다. 여러 파일들을 업로드하기 위해서는, ``files`` 매개변수가 :class:`~discord.File` 객체들이 들어있는"
" :class:`list`\\와 함께 사용되어야 합니다. **두 매개변수를 동시에 사용하는 경우에는 예외가 발생하게 됩니다**."

#: discord.ext.commands.Context.send:14 of
msgid ""
"If the ``embed`` parameter is provided, it must be of type "
":class:`~discord.Embed` and it must be a rich embed type."
msgstr ""
"만약 ``embed`` 매개변수가 주어졌다면 :class:`~discord.Embed` 타입이어야 하고 rich 임베드 타입이어야 "
"합니다."

#: discord.ext.commands.Context.send:17 of
msgid "The content of the message to send."
msgstr "전송할 메시지의 내용."

#: discord.ext.commands.Context.send:19 of
msgid "Indicates if the message should be sent using text-to-speech."
msgstr "메시지가 TTS를 이용해서 보내야 할지의 여부."

#: discord.ext.commands.Context.send:21 of
msgid "The rich embed for the content."
msgstr "내용의 rich 임베드."

#: discord.ext.commands.Context.send:23 of
msgid "The file to upload."
msgstr "업로드 할 파일."

#: discord.ext.commands.Context.send:25 of
msgid "A list of files to upload. Must be a maximum of 10."
msgstr "업로드 할 파일들의 리스트. 최대 개수는 10 입니다."

#: discord.ext.commands.Context.send:27 of
msgid ""
"The nonce to use for sending this message. If the message was "
"successfully sent, then the message will have a nonce with this value."
msgstr "이 메시지를 전송할 때 사용할 임시값. 만약에 메시지가 성공적으로 전송되었다면, 그 메시지는 이 값의 임시값을 가질 것입니다."

#: discord.ext.commands.Context.send:30 of
msgid ""
"If provided, the number of seconds to wait in the background before "
"deleting the message we just sent. If the deletion fails, then it is "
"silently ignored."
msgstr "만약에 주어졌다면, 방금 전송한 메시지를 삭제하기 전 까지 백그라운드에서 기다려야 하는 초. 삭제가 실패되었다면, 조용히 무시됩니다."

#: discord.ext.commands.Context.send:34 of
msgid ""
"Controls the mentions being processed in this message. If this is passed,"
" then the object is merged with :attr:`~discord.Client.allowed_mentions`."
" The merging behaviour only overrides attributes that have been "
"explicitly passed to the object, otherwise it uses the attributes set in "
":attr:`~discord.Client.allowed_mentions`. If no object is passed at all "
"then the defaults given by :attr:`~discord.Client.allowed_mentions` are "
"used instead.  .. versionadded:: 1.4"
msgstr ""
"이 메시지에서 처리되는 맨션을 조정. 만약에 주어졌다면, 객체는 "
":attr:`~discord.Client.allowed_mentions`\\와 합체됩니다. 합체되는 방식은 객체에 명시적으로 설정된"
" 속성들만 오버라이드 하고, 명시되있지 않았다면 :attr:`~discord.Client.allowed_mentions`\\에 "
"설정된 속성들을 사용합니다. 만약 그 어떤 객체들도 전달되지 않았다면 "
":attr:`~discord.Client.allowed_mentions`\\에 있는 기본값들을 사용합니다.  .. "
"versionadded:: 1.4"

#: discord.ext.commands.Context.send:43 of
msgid ""
"A reference to the :class:`~discord.Message` to which you are replying, "
"this can be created using :meth:`~discord.Message.to_reference` or passed"
" directly as a :class:`~discord.Message`. You can control whether this "
"mentions the author of the referenced message using the "
":attr:`~discord.AllowedMentions.replied_user` attribute of "
"``allowed_mentions`` or by setting ``mention_author``.  .. versionadded::"
" 1.6"
msgstr ""

#: discord.ext.commands.Context.send:43 of
msgid ""
"A reference to the :class:`~discord.Message` to which you are replying, "
"this can be created using :meth:`~discord.Message.to_reference` or passed"
" directly as a :class:`~discord.Message`. You can control whether this "
"mentions the author of the referenced message using the "
":attr:`~discord.AllowedMentions.replied_user` attribute of "
"``allowed_mentions`` or by setting ``mention_author``."
msgstr ""

#: discord.ext.commands.Context.send:50 of
msgid ""
"If set, overrides the :attr:`~discord.AllowedMentions.replied_user` "
"attribute of ``allowed_mentions``.  .. versionadded:: 1.6"
msgstr ""

#: discord.ext.commands.Context.send:50 of
msgid ""
"If set, overrides the :attr:`~discord.AllowedMentions.replied_user` "
"attribute of ``allowed_mentions``."
msgstr ""

#: discord.ext.commands.Context.send:57 of
#, fuzzy
msgid ""
"The ``files`` list is not of the appropriate size,     you specified both"
" ``file`` and ``files``,     or the ``reference`` object is not a "
":class:`~discord.Message`     or :class:`~discord.MessageReference`."
msgstr "``files`` 리스트가 적절한 크기가 아니거나 ``file``\\과 ``files`` 둘 다 사용되었습니다."

#: discord.ext.commands.Context.trigger_typing:3 of
msgid "Triggers a *typing* indicator to the destination."
msgstr "*입력중* 표시를 목적지에 트리거합니다."

#: discord.ext.commands.Context.trigger_typing:5 of
msgid ""
"*Typing* indicator will go away after 10 seconds, or after a message is "
"sent."
msgstr "*입력중* 표시는 10초 이후 또는 메시지를 보낸 이후 사라집니다."

#: ../../ext/commands/api.rst:270
msgid "Converters"
msgstr ""

#: discord.ext.commands.Converter:1 of
msgid ""
"The base class of custom converters that require the :class:`.Context` to"
" be passed to be useful."
msgstr ""

#: discord.ext.commands.Converter:4 of
msgid ""
"This allows you to implement converters that function similar to the "
"special cased ``discord`` classes."
msgstr ""

#: discord.ext.commands.Converter:7 of
msgid ""
"Classes that derive from this should override the "
":meth:`~.Converter.convert` method to do its conversion logic. This "
"method must be a :ref:`coroutine <coroutine>`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:3
#: discord.ext.commands.ColourConverter.convert:3
#: discord.ext.commands.Converter.convert:3
#: discord.ext.commands.EmojiConverter.convert:3
#: discord.ext.commands.GameConverter.convert:3
#: discord.ext.commands.InviteConverter.convert:3
#: discord.ext.commands.MemberConverter.convert:3
#: discord.ext.commands.MessageConverter.convert:3
#: discord.ext.commands.PartialEmojiConverter.convert:3
#: discord.ext.commands.RoleConverter.convert:3
#: discord.ext.commands.TextChannelConverter.convert:3
#: discord.ext.commands.UserConverter.convert:3
#: discord.ext.commands.VoiceChannelConverter.convert:3
#: discord.ext.commands.clean_content.convert:3 of
msgid "The method to override to do conversion logic."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:5
#: discord.ext.commands.ColourConverter.convert:5
#: discord.ext.commands.Converter.convert:5
#: discord.ext.commands.EmojiConverter.convert:5
#: discord.ext.commands.GameConverter.convert:5
#: discord.ext.commands.InviteConverter.convert:5
#: discord.ext.commands.MemberConverter.convert:5
#: discord.ext.commands.MessageConverter.convert:5
#: discord.ext.commands.PartialEmojiConverter.convert:5
#: discord.ext.commands.RoleConverter.convert:5
#: discord.ext.commands.TextChannelConverter.convert:5
#: discord.ext.commands.UserConverter.convert:5
#: discord.ext.commands.VoiceChannelConverter.convert:5
#: discord.ext.commands.clean_content.convert:5 of
msgid ""
"If an error is found while converting, it is recommended to raise a "
":exc:`.CommandError` derived exception as it will properly propagate to "
"the error handlers."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:9
#: discord.ext.commands.ColourConverter.convert:9
#: discord.ext.commands.Converter.convert:9
#: discord.ext.commands.EmojiConverter.convert:9
#: discord.ext.commands.GameConverter.convert:9
#: discord.ext.commands.InviteConverter.convert:9
#: discord.ext.commands.MemberConverter.convert:9
#: discord.ext.commands.MessageConverter.convert:9
#: discord.ext.commands.PartialEmojiConverter.convert:9
#: discord.ext.commands.RoleConverter.convert:9
#: discord.ext.commands.TextChannelConverter.convert:9
#: discord.ext.commands.UserConverter.convert:9
#: discord.ext.commands.VoiceChannelConverter.convert:9
#: discord.ext.commands.clean_content.convert:9 of
msgid "The invocation context that the argument is being used in."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:11
#: discord.ext.commands.ColourConverter.convert:11
#: discord.ext.commands.Converter.convert:11
#: discord.ext.commands.EmojiConverter.convert:11
#: discord.ext.commands.GameConverter.convert:11
#: discord.ext.commands.InviteConverter.convert:11
#: discord.ext.commands.MemberConverter.convert:11
#: discord.ext.commands.MessageConverter.convert:11
#: discord.ext.commands.PartialEmojiConverter.convert:11
#: discord.ext.commands.RoleConverter.convert:11
#: discord.ext.commands.TextChannelConverter.convert:11
#: discord.ext.commands.UserConverter.convert:11
#: discord.ext.commands.VoiceChannelConverter.convert:11
#: discord.ext.commands.clean_content.convert:11 of
msgid "The argument that is being converted."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:14
#: discord.ext.commands.ColourConverter.convert:14
#: discord.ext.commands.Converter.convert:14
#: discord.ext.commands.EmojiConverter.convert:14
#: discord.ext.commands.GameConverter.convert:14
#: discord.ext.commands.InviteConverter.convert:14
#: discord.ext.commands.MemberConverter.convert:14
#: discord.ext.commands.MessageConverter.convert:14
#: discord.ext.commands.PartialEmojiConverter.convert:14
#: discord.ext.commands.RoleConverter.convert:14
#: discord.ext.commands.TextChannelConverter.convert:14
#: discord.ext.commands.UserConverter.convert:14
#: discord.ext.commands.VoiceChannelConverter.convert:14
#: discord.ext.commands.clean_content.convert:14 of
msgid "A generic exception occurred when converting the argument."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter.convert:15
#: discord.ext.commands.ColourConverter.convert:15
#: discord.ext.commands.Converter.convert:15
#: discord.ext.commands.EmojiConverter.convert:15
#: discord.ext.commands.GameConverter.convert:15
#: discord.ext.commands.InviteConverter.convert:15
#: discord.ext.commands.MemberConverter.convert:15
#: discord.ext.commands.MessageConverter.convert:15
#: discord.ext.commands.PartialEmojiConverter.convert:15
#: discord.ext.commands.RoleConverter.convert:15
#: discord.ext.commands.TextChannelConverter.convert:15
#: discord.ext.commands.UserConverter.convert:15
#: discord.ext.commands.VoiceChannelConverter.convert:15
#: discord.ext.commands.clean_content.convert:15 of
msgid "The converter failed to convert the argument."
msgstr ""

#: discord.ext.commands.MemberConverter:1 of
msgid "Converts to a :class:`~discord.Member`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:3
#: discord.ext.commands.MemberConverter:3 discord.ext.commands.RoleConverter:3
#: discord.ext.commands.TextChannelConverter:3
#: discord.ext.commands.VoiceChannelConverter:3 of
msgid ""
"All lookups are via the local guild. If in a DM context, then the lookup "
"is done by the global cache."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:6
#: discord.ext.commands.EmojiConverter:6 discord.ext.commands.MemberConverter:6
#: discord.ext.commands.MessageConverter:5 discord.ext.commands.RoleConverter:6
#: discord.ext.commands.TextChannelConverter:6
#: discord.ext.commands.UserConverter:5
#: discord.ext.commands.VoiceChannelConverter:6 of
msgid "The lookup strategy is as follows (in order):"
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:8
#: discord.ext.commands.EmojiConverter:8 discord.ext.commands.MemberConverter:8
#: discord.ext.commands.RoleConverter:8
#: discord.ext.commands.TextChannelConverter:8
#: discord.ext.commands.UserConverter:7
#: discord.ext.commands.VoiceChannelConverter:8 of
msgid "Lookup by ID."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:9
#: discord.ext.commands.MemberConverter:9 discord.ext.commands.RoleConverter:9
#: discord.ext.commands.TextChannelConverter:9
#: discord.ext.commands.UserConverter:8
#: discord.ext.commands.VoiceChannelConverter:9 of
msgid "Lookup by mention."
msgstr ""

#: discord.ext.commands.MemberConverter:10 discord.ext.commands.UserConverter:9
#: of
msgid "Lookup by name#discrim"
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:10
#: discord.ext.commands.EmojiConverter:10
#: discord.ext.commands.MemberConverter:11
#: discord.ext.commands.RoleConverter:10
#: discord.ext.commands.TextChannelConverter:10
#: discord.ext.commands.UserConverter:10
#: discord.ext.commands.VoiceChannelConverter:10 of
msgid "Lookup by name"
msgstr ""

#: discord.ext.commands.MemberConverter:12 of
msgid "Lookup by nickname"
msgstr ""

#: discord.ext.commands.MemberConverter:14 of
msgid "Raise :exc:`.MemberNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.MemberConverter:17 of
msgid ""
"This converter now lazily fetches members from the gateway and HTTP APIs,"
" optionally caching the result if :attr:`.MemberCacheFlags.joined` is "
"enabled."
msgstr ""

#: discord.ext.commands.UserConverter:1 of
msgid "Converts to a :class:`~discord.User`."
msgstr ""

#: discord.ext.commands.UserConverter:3 of
msgid "All lookups are via the global user cache."
msgstr ""

#: discord.ext.commands.UserConverter:12 of
msgid "Raise :exc:`.UserNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.UserConverter:15 of
msgid ""
"This converter now lazily fetches users from the HTTP APIs if an ID is "
"passed and it's not available in cache."
msgstr ""

#: discord.ext.commands.MessageConverter:1 of
msgid "Converts to a :class:`discord.Message`."
msgstr ""

#: discord.ext.commands.MessageConverter:7 of
msgid ""
"Lookup by \"{channel ID}-{message ID}\" (retrieved by shift-clicking on "
"\"Copy ID\")"
msgstr ""

#: discord.ext.commands.MessageConverter:8 of
msgid "Lookup by message ID (the message **must** be in the context channel)"
msgstr ""

#: discord.ext.commands.MessageConverter:9 of
msgid "Lookup by message URL"
msgstr ""

#: discord.ext.commands.MessageConverter:11 of
msgid ""
"Raise :exc:`.ChannelNotFound`, :exc:`.MessageNotFound` or "
":exc:`.ChannelNotReadable` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.TextChannelConverter:1 of
msgid "Converts to a :class:`~discord.TextChannel`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:12
#: discord.ext.commands.TextChannelConverter:12
#: discord.ext.commands.VoiceChannelConverter:12 of
msgid "Raise :exc:`.ChannelNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.VoiceChannelConverter:1 of
msgid "Converts to a :class:`~discord.VoiceChannel`."
msgstr ""

#: discord.ext.commands.CategoryChannelConverter:1 of
msgid "Converts to a :class:`~discord.CategoryChannel`."
msgstr ""

#: discord.ext.commands.InviteConverter:1 of
msgid "Converts to a :class:`~discord.Invite`."
msgstr ""

#: discord.ext.commands.InviteConverter:3 of
msgid "This is done via an HTTP request using :meth:`.Bot.fetch_invite`."
msgstr ""

#: discord.ext.commands.InviteConverter:5 of
msgid "Raise :exc:`.BadInviteArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.RoleConverter:1 of
msgid "Converts to a :class:`~discord.Role`."
msgstr ""

#: discord.ext.commands.RoleConverter:12 of
msgid "Raise :exc:`.RoleNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.GameConverter:1 of
msgid "Converts to :class:`~discord.Game`."
msgstr ""

#: discord.ext.commands.ColourConverter:1 of
msgid "Converts to a :class:`~discord.Colour`."
msgstr ""

#: discord.ext.commands.ColourConverter:3 of
msgid "Add an alias named ColorConverter"
msgstr ""

#: discord.ext.commands.ColourConverter:6 of
msgid "The following formats are accepted:"
msgstr ""

#: discord.ext.commands.ColourConverter:8 of
msgid "``0x<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:9 of
msgid "``#<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:10 of
msgid "``0x#<hex>``"
msgstr ""

#: discord.ext.commands.ColourConverter:11 of
msgid "Any of the ``classmethod`` in :class:`Colour`"
msgstr ""

#: discord.ext.commands.ColourConverter:13 of
msgid "The ``_`` in the name can be optionally replaced with spaces."
msgstr ""

#: discord.ext.commands.ColourConverter:15 of
msgid "Raise :exc:`.BadColourArgument` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.EmojiConverter:1 of
msgid "Converts to a :class:`~discord.Emoji`."
msgstr ""

#: discord.ext.commands.EmojiConverter:3 of
msgid ""
"All lookups are done for the local guild first, if available. If that "
"lookup fails, then it checks the client's global cache."
msgstr ""

#: discord.ext.commands.EmojiConverter:9 of
msgid "Lookup by extracting ID from the emoji."
msgstr ""

#: discord.ext.commands.EmojiConverter:12 of
msgid "Raise :exc:`.EmojiNotFound` instead of generic :exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.PartialEmojiConverter:1 of
msgid "Converts to a :class:`~discord.PartialEmoji`."
msgstr ""

#: discord.ext.commands.PartialEmojiConverter:3 of
msgid "This is done by extracting the animated flag, name and ID from the emoji."
msgstr ""

#: discord.ext.commands.PartialEmojiConverter:5 of
msgid ""
"Raise :exc:`.PartialEmojiConversionFailure` instead of generic "
":exc:`.BadArgument`"
msgstr ""

#: discord.ext.commands.clean_content:1 of
msgid "Converts the argument to mention scrubbed version of said content."
msgstr ""

#: discord.ext.commands.clean_content:4 of
msgid "This behaves similarly to :attr:`~discord.Message.clean_content`."
msgstr ""

#: discord.ext.commands.clean_content:8 of
msgid "Whether to clean channel mentions."
msgstr ""

#: discord.ext.commands.clean_content:14 of
msgid "Whether to use nicknames when transforming mentions."
msgstr ""

#: discord.ext.commands.clean_content:20 of
msgid "Whether to also escape special markdown characters."
msgstr ""

#: ../../ext/commands/api.rst:316
msgid ""
"A special converter that greedily consumes arguments until it can't. As a"
" consequence of this behaviour, most input errors are silently discarded,"
" since it is used as an indicator of when to stop parsing."
msgstr ""

#: ../../ext/commands/api.rst:320
msgid ""
"When a parser error is met the greedy converter stops converting, undoes "
"the internal string parsing routine, and continues parsing regularly."
msgstr ""

#: ../../ext/commands/api.rst:323
msgid "For example, in the following code:"
msgstr ""

#: ../../ext/commands/api.rst:331
msgid ""
"An invocation of ``[p]test 1 2 3 4 5 6 hello`` would pass ``numbers`` "
"with ``[1, 2, 3, 4, 5, 6]`` and ``reason`` with ``hello``\\."
msgstr ""

#: ../../ext/commands/api.rst:334
msgid "For more information, check :ref:`ext_commands_special_converters`."
msgstr ""

#: ../../ext/commands/api.rst:339
msgid "Exceptions"
msgstr ""

#: discord.ext.commands.CommandError:1 of
msgid "The base exception type for all command related errors."
msgstr ""

#: discord.ext.commands.CommandError:3 of
msgid "This inherits from :exc:`discord.DiscordException`."
msgstr ""

#: discord.ext.commands.CommandError:5 of
msgid ""
"This exception and exceptions inherited from it are handled in a special "
"way as they are caught and passed into a special event from "
":class:`.Bot`\\, :func:`on_command_error`."
msgstr ""

#: discord.ext.commands.ConversionError:1 of
msgid "Exception raised when a Converter class raises non-CommandError."
msgstr ""

#: discord.ext.commands.CommandNotFound:7
#: discord.ext.commands.ConversionError:3
#: discord.ext.commands.MaxConcurrencyReached:3
#: discord.ext.commands.UserInputError:4 of
msgid "This inherits from :exc:`CommandError`."
msgstr ""

#: discord.ext.commands.ConversionError:7 of
msgid "The converter that failed."
msgstr ""

#: discord.ext.commands.ConversionError:9 of
msgid ":class:`discord.ext.commands.Converter`"
msgstr ""

#: discord.ext.commands.CommandInvokeError:7
#: discord.ext.commands.ConversionError:13
#: discord.ext.commands.ExtensionFailed:13 of
msgid ""
"The original exception that was raised. You can also get this via the "
"``__cause__`` attribute."
msgstr ""

#: discord.ext.commands.CommandInvokeError:10
#: discord.ext.commands.ConversionError:16
#: discord.ext.commands.ExtensionFailed:16 of
msgid ":exc:`Exception`"
msgstr ""

#: discord.ext.commands.MissingRequiredArgument:1 of
msgid ""
"Exception raised when parsing a command and a parameter that is required "
"is not encountered."
msgstr ""

#: discord.ext.commands.BadArgument:4 discord.ext.commands.BadUnionArgument:4
#: discord.ext.commands.MissingRequiredArgument:4
#: discord.ext.commands.TooManyArguments:4 of
msgid "This inherits from :exc:`UserInputError`"
msgstr ""

#: discord.ext.commands.MissingRequiredArgument:8 of
msgid "The argument that is missing."
msgstr ""

#: discord.ext.commands.BadUnionArgument:10
#: discord.ext.commands.MissingRequiredArgument:10 of
msgid ":class:`inspect.Parameter`"
msgstr ""

#: discord.ext.commands.ArgumentParsingError:1 of
msgid "An exception raised when the parser fails to parse a user's input."
msgstr ""

#: discord.ext.commands.ArgumentParsingError:3 of
msgid "This inherits from :exc:`UserInputError`."
msgstr ""

#: discord.ext.commands.ArgumentParsingError:5 of
msgid ""
"There are child classes that implement more granular parsing errors for "
"i18n purposes."
msgstr ""

#: discord.ext.commands.UnexpectedQuoteError:1 of
msgid ""
"An exception raised when the parser encounters a quote mark inside a non-"
"quoted string."
msgstr ""

#: discord.ext.commands.ExpectedClosingQuoteError:3
#: discord.ext.commands.InvalidEndOfQuotedStringError:4
#: discord.ext.commands.UnexpectedQuoteError:3 of
msgid "This inherits from :exc:`ArgumentParsingError`."
msgstr ""

#: discord.ext.commands.UnexpectedQuoteError:7 of
msgid "The quote mark that was found inside the non-quoted string."
msgstr ""

#: discord.ext.commands.InvalidEndOfQuotedStringError:1 of
msgid ""
"An exception raised when a space is expected after the closing quote in a"
" string but a different character is found."
msgstr ""

#: discord.ext.commands.InvalidEndOfQuotedStringError:8 of
msgid "The character found instead of the expected string."
msgstr ""

#: discord.ext.commands.ExpectedClosingQuoteError:1 of
msgid "An exception raised when a quote character is expected but not found."
msgstr ""

#: discord.ext.commands.ExpectedClosingQuoteError:7 of
msgid "The quote character expected."
msgstr ""

#: discord.ext.commands.BadArgument:1 of
msgid ""
"Exception raised when a parsing or conversion failure is encountered on "
"an argument to pass into a command."
msgstr ""

#: discord.ext.commands.BadUnionArgument:1 of
msgid ""
"Exception raised when a :data:`typing.Union` converter fails for all its "
"associated types."
msgstr ""

#: discord.ext.commands.BadUnionArgument:8 of
msgid "The parameter that failed being converted."
msgstr ""

#: discord.ext.commands.BadUnionArgument:14 of
msgid "A tuple of converters attempted in conversion, in order of failure."
msgstr ""

#: discord.ext.commands.BadUnionArgument:16 of
msgid "Tuple[Type, ...]"
msgstr ""

#: discord.ext.commands.BadUnionArgument:20 of
msgid "A list of errors that were caught from failing the conversion."
msgstr ""

#: discord.ext.commands.BadUnionArgument:22 of
msgid "List[:class:`CommandError`]"
msgstr ""

#: discord.ext.commands.PrivateMessageOnly:1 of
msgid ""
"Exception raised when an operation does not work outside of private "
"message contexts."
msgstr ""

#: discord.ext.commands.BotMissingAnyRole:4
#: discord.ext.commands.BotMissingPermissions:4
#: discord.ext.commands.BotMissingRole:3 discord.ext.commands.MissingAnyRole:4
#: discord.ext.commands.MissingPermissions:4 discord.ext.commands.MissingRole:3
#: discord.ext.commands.NoPrivateMessage:4 discord.ext.commands.NotOwner:3
#: discord.ext.commands.PrivateMessageOnly:4 of
msgid "This inherits from :exc:`CheckFailure`"
msgstr ""

#: discord.ext.commands.NoPrivateMessage:1 of
msgid ""
"Exception raised when an operation does not work in private message "
"contexts."
msgstr ""

#: discord.ext.commands.CheckFailure:1 of
msgid ""
"Exception raised when the predicates in :attr:`.Command.checks` have "
"failed."
msgstr ""

#: discord.ext.commands.CheckFailure:3
#: discord.ext.commands.CommandInvokeError:3
#: discord.ext.commands.CommandOnCooldown:3
#: discord.ext.commands.DisabledCommand:3 of
msgid "This inherits from :exc:`CommandError`"
msgstr ""

#: discord.ext.commands.CheckAnyFailure:1 of
msgid "Exception raised when all predicates in :func:`check_any` fail."
msgstr ""

#: discord.ext.commands.CheckAnyFailure:3
#: discord.ext.commands.NSFWChannelRequired:3 of
msgid "This inherits from :exc:`CheckFailure`."
msgstr ""

#: discord.ext.commands.CheckAnyFailure:9 of
msgid "A list of errors that were caught during execution."
msgstr ""

#: discord.ext.commands.CheckAnyFailure:11 of
msgid "List[:class:`CheckFailure`]"
msgstr ""

#: discord.ext.commands.CheckAnyFailure:15 of
msgid "A list of check predicates that failed."
msgstr ""

#: discord.ext.commands.CheckAnyFailure:17 of
msgid "List[Callable[[:class:`Context`], :class:`bool`]]"
msgstr ""

#: discord.ext.commands.CommandNotFound:1 of
msgid ""
"Exception raised when a command is attempted to be invoked but no command"
" under that name is found."
msgstr ""

#: discord.ext.commands.CommandNotFound:4 of
msgid ""
"This is not raised for invalid subcommands, rather just the initial main "
"command that is attempted to be invoked."
msgstr ""

#: discord.ext.commands.DisabledCommand:1 of
msgid "Exception raised when the command being invoked is disabled."
msgstr ""

#: discord.ext.commands.CommandInvokeError:1 of
msgid "Exception raised when the command being invoked raised an exception."
msgstr ""

#: discord.ext.commands.TooManyArguments:1 of
msgid ""
"Exception raised when the command was passed too many arguments and its "
":attr:`.Command.ignore_extra` attribute was not set to ``True``."
msgstr ""

#: discord.ext.commands.UserInputError:1 of
msgid ""
"The base exception type for errors that involve errors regarding user "
"input."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:1 of
msgid "Exception raised when the command being invoked is on cooldown."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:7 of
msgid ""
"A class with attributes ``rate``, ``per``, and ``type`` similar to the "
":func:`.cooldown` decorator."
msgstr ""

#: discord.ext.commands.CommandOnCooldown:10 of
msgid "Cooldown"
msgstr ""

#: discord.ext.commands.CommandOnCooldown:14 of
msgid "The amount of seconds to wait before you can retry again."
msgstr ""

#: discord.ext.commands.MaxConcurrencyReached:1 of
msgid ""
"Exception raised when the command being invoked has reached its maximum "
"concurrency."
msgstr ""

#: discord.ext.commands.MaxConcurrencyReached:7 of
msgid "The maximum number of concurrent invokers allowed."
msgstr ""

#: discord.ext.commands.MaxConcurrencyReached:13 of
msgid "The bucket type passed to the :func:`.max_concurrency` decorator."
msgstr ""

#: discord.ext.commands.MaxConcurrencyReached:15 of
msgid ":class:`.BucketType`"
msgstr ""

#: discord.ext.commands.NotOwner:1 of
msgid "Exception raised when the message author is not the owner of the bot."
msgstr ""

#: discord.ext.commands.MessageNotFound:1 of
msgid "Exception raised when the message provided was not found in the channel."
msgstr ""

#: discord.ext.commands.BadBoolArgument:3
#: discord.ext.commands.ChannelNotFound:3
#: discord.ext.commands.ChannelNotReadable:4
#: discord.ext.commands.EmojiNotFound:3 discord.ext.commands.MemberNotFound:4
#: discord.ext.commands.MessageNotFound:3
#: discord.ext.commands.PartialEmojiConversionFailure:4
#: discord.ext.commands.RoleNotFound:3 discord.ext.commands.UserNotFound:4 of
msgid "This inherits from :exc:`BadArgument`"
msgstr ""

#: discord.ext.commands.MessageNotFound:9 of
msgid "The message supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.MemberNotFound:1 of
msgid ""
"Exception raised when the member provided was not found in the bot's "
"cache."
msgstr ""

#: discord.ext.commands.MemberNotFound:10 of
msgid "The member supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.UserNotFound:1 of
msgid "Exception raised when the user provided was not found in the bot's cache."
msgstr ""

#: discord.ext.commands.UserNotFound:10 of
msgid "The user supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.ChannelNotFound:1 of
msgid "Exception raised when the bot can not find the channel."
msgstr ""

#: discord.ext.commands.ChannelNotFound:9 of
msgid "The channel supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.ChannelNotReadable:1 of
msgid ""
"Exception raised when the bot does not have permission to read messages "
"in the channel."
msgstr ""

#: discord.ext.commands.ChannelNotReadable:10 of
msgid "The channel supplied by the caller that was not readable"
msgstr ""

#: discord.ext.commands.ChannelNotReadable:12 of
msgid ":class:`.abc.GuildChannel`"
msgstr ""

#: discord.ext.commands.RoleNotFound:1 of
msgid "Exception raised when the bot can not find the role."
msgstr ""

#: discord.ext.commands.RoleNotFound:9 of
msgid "The role supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.EmojiNotFound:1 of
msgid "Exception raised when the bot can not find the emoji."
msgstr ""

#: discord.ext.commands.EmojiNotFound:9 of
msgid "The emoji supplied by the caller that was not found"
msgstr ""

#: discord.ext.commands.PartialEmojiConversionFailure:1 of
msgid ""
"Exception raised when the emoji provided does not match the correct "
"format."
msgstr ""

#: discord.ext.commands.PartialEmojiConversionFailure:10 of
msgid "The emoji supplied by the caller that did not match the regex"
msgstr ""

#: discord.ext.commands.BadBoolArgument:1 of
msgid "Exception raised when a boolean argument was not convertable."
msgstr ""

#: discord.ext.commands.BadBoolArgument:9 of
msgid ""
"The boolean argument supplied by the caller that is not in the predefined"
" list"
msgstr ""

#: discord.ext.commands.MissingPermissions:1 of
msgid ""
"Exception raised when the command invoker lacks permissions to run a "
"command."
msgstr ""

#: discord.ext.commands.BotMissingPermissions:8
#: discord.ext.commands.MissingPermissions:8 of
msgid "The required permissions that are missing."
msgstr ""

#: discord.ext.commands.BotMissingPermissions:1 of
msgid "Exception raised when the bot's member lacks permissions to run a command."
msgstr ""

#: discord.ext.commands.MissingRole:1 of
msgid "Exception raised when the command invoker lacks a role to run a command."
msgstr ""

#: discord.ext.commands.BotMissingRole:9 discord.ext.commands.MissingRole:9 of
msgid ""
"The required role that is missing. This is the parameter passed to "
":func:`~.commands.has_role`."
msgstr ""

#: discord.ext.commands.BotMissingRole:12 discord.ext.commands.MissingRole:12
#: of
msgid "Union[:class:`str`, :class:`int`]"
msgstr ""

#: discord.ext.commands.BotMissingRole:1 of
msgid "Exception raised when the bot's member lacks a role to run a command."
msgstr ""

#: discord.ext.commands.MissingAnyRole:1 of
msgid ""
"Exception raised when the command invoker lacks any of the roles "
"specified to run a command."
msgstr ""

#: discord.ext.commands.MissingAnyRole:10 of
msgid ""
"The roles that the invoker is missing. These are the parameters passed to"
" :func:`~.commands.has_any_role`."
msgstr ""

#: discord.ext.commands.BotMissingAnyRole:13
#: discord.ext.commands.MissingAnyRole:13 of
msgid "List[Union[:class:`str`, :class:`int`]]"
msgstr ""

#: discord.ext.commands.BotMissingAnyRole:1 of
msgid ""
"Exception raised when the bot's member lacks any of the roles specified "
"to run a command."
msgstr ""

#: discord.ext.commands.BotMissingAnyRole:10 of
msgid ""
"The roles that the bot's member is missing. These are the parameters "
"passed to :func:`~.commands.has_any_role`."
msgstr ""

#: discord.ext.commands.NSFWChannelRequired:1 of
msgid "Exception raised when a channel does not have the required NSFW setting."
msgstr ""

#: discord.ext.commands.NSFWChannelRequired:7 of
msgid "The channel that does not have NSFW enabled."
msgstr ""

#: discord.ext.commands.ExtensionError:1 of
msgid "Base exception for extension related errors."
msgstr ""

#: discord.ext.commands.ExtensionError:3 of
msgid "This inherits from :exc:`~discord.DiscordException`."
msgstr ""

#: discord.ext.commands.ExtensionError:7 of
msgid "The extension that had an error."
msgstr ""

#: discord.ext.commands.ExtensionAlreadyLoaded:1 of
msgid "An exception raised when an extension has already been loaded."
msgstr ""

#: discord.ext.commands.ExtensionAlreadyLoaded:3
#: discord.ext.commands.ExtensionFailed:3
#: discord.ext.commands.ExtensionNotFound:3
#: discord.ext.commands.ExtensionNotLoaded:3
#: discord.ext.commands.NoEntryPointError:3 of
msgid "This inherits from :exc:`ExtensionError`"
msgstr ""

#: discord.ext.commands.ExtensionNotLoaded:1 of
msgid "An exception raised when an extension was not loaded."
msgstr ""

#: discord.ext.commands.NoEntryPointError:1 of
msgid ""
"An exception raised when an extension does not have a ``setup`` entry "
"point function."
msgstr ""

#: discord.ext.commands.ExtensionFailed:1 of
msgid ""
"An exception raised when an extension failed to load during execution of "
"the module or ``setup`` entry point."
msgstr ""

#: discord.ext.commands.ExtensionFailed:7
#: discord.ext.commands.ExtensionNotFound:10 of
msgid "The extension that had the error."
msgstr ""

#: discord.ext.commands.ExtensionNotFound:1 of
msgid "An exception raised when an extension is not found."
msgstr ""

#: discord.ext.commands.ExtensionNotFound:5 of
msgid "Made the ``original`` attribute always None."
msgstr ""

#: discord.ext.commands.ExtensionNotFound:16 of
msgid "Always ``None`` for backwards compatibility."
msgstr ""

#: discord.ext.commands.ExtensionNotFound:18 of
msgid ":class:`NoneType`"
msgstr ""

#: discord.ext.commands.CommandRegistrationError:1 of
msgid ""
"An exception raised when the command can't be added because the name is "
"already taken by a different command."
msgstr ""

#: discord.ext.commands.CommandRegistrationError:4 of
msgid "This inherits from :exc:`discord.ClientException`"
msgstr ""

#: discord.ext.commands.CommandRegistrationError:10 of
msgid "The command name that had the error."
msgstr ""

#: discord.ext.commands.CommandRegistrationError:16 of
msgid "Whether the name that conflicts is an alias of the command we try to add."
msgstr ""

#: ../../ext/commands/api.rst:523
msgid ":exc:`~.DiscordException`"
msgstr ""

#: ../../ext/commands/api.rst:517
msgid ":exc:`~.commands.CommandError`"
msgstr ""

#: ../../ext/commands/api.rst:481
msgid ":exc:`~.commands.ConversionError`"
msgstr ""

#: ../../ext/commands/api.rst:500
msgid ":exc:`~.commands.UserInputError`"
msgstr ""

#: ../../ext/commands/api.rst:483
msgid ":exc:`~.commands.MissingRequiredArgument`"
msgstr ""

#: ../../ext/commands/api.rst:484
msgid ":exc:`~.commands.TooManyArguments`"
msgstr ""

#: ../../ext/commands/api.rst:495
msgid ":exc:`~.commands.BadArgument`"
msgstr ""

#: ../../ext/commands/api.rst:486
msgid ":exc:`~.commands.MessageNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:487
msgid ":exc:`~.commands.MemberNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:488
msgid ":exc:`~.commands.UserNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:489
msgid ":exc:`~.commands.ChannelNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:490
msgid ":exc:`~.commands.ChannelNotReadable`"
msgstr ""

#: ../../ext/commands/api.rst:491
msgid ":exc:`~.commands.BadColourArgument`"
msgstr ""

#: ../../ext/commands/api.rst:492
msgid ":exc:`~.commands.RoleNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:493
msgid ":exc:`~.commands.BadInviteArgument`"
msgstr ""

#: ../../ext/commands/api.rst:494
msgid ":exc:`~.commands.EmojiNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:495
msgid ":exc:`~.commands.PartialEmojiConversionFailure`"
msgstr ""

#: ../../ext/commands/api.rst:496
msgid ":exc:`~.commands.BadBoolArgument`"
msgstr ""

#: ../../ext/commands/api.rst:497
msgid ":exc:`~.commands.BadUnionArgument`"
msgstr ""

#: ../../ext/commands/api.rst:500
msgid ":exc:`~.commands.ArgumentParsingError`"
msgstr ""

#: ../../ext/commands/api.rst:499
msgid ":exc:`~.commands.UnexpectedQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:500
msgid ":exc:`~.commands.InvalidEndOfQuotedStringError`"
msgstr ""

#: ../../ext/commands/api.rst:501
msgid ":exc:`~.commands.ExpectedClosingQuoteError`"
msgstr ""

#: ../../ext/commands/api.rst:502
msgid ":exc:`~.commands.CommandNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:513
msgid ":exc:`~.commands.CheckFailure`"
msgstr ""

#: ../../ext/commands/api.rst:504
msgid ":exc:`~.commands.CheckAnyFailure`"
msgstr ""

#: ../../ext/commands/api.rst:505
msgid ":exc:`~.commands.PrivateMessageOnly`"
msgstr ""

#: ../../ext/commands/api.rst:506
msgid ":exc:`~.commands.NoPrivateMessage`"
msgstr ""

#: ../../ext/commands/api.rst:507
msgid ":exc:`~.commands.NotOwner`"
msgstr ""

#: ../../ext/commands/api.rst:508
msgid ":exc:`~.commands.MissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:509
msgid ":exc:`~.commands.BotMissingPermissions`"
msgstr ""

#: ../../ext/commands/api.rst:510
msgid ":exc:`~.commands.MissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:511
msgid ":exc:`~.commands.BotMissingRole`"
msgstr ""

#: ../../ext/commands/api.rst:512
msgid ":exc:`~.commands.MissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:513
msgid ":exc:`~.commands.BotMissingAnyRole`"
msgstr ""

#: ../../ext/commands/api.rst:514
msgid ":exc:`~.commands.NSFWChannelRequired`"
msgstr ""

#: ../../ext/commands/api.rst:515
msgid ":exc:`~.commands.DisabledCommand`"
msgstr ""

#: ../../ext/commands/api.rst:516
msgid ":exc:`~.commands.CommandInvokeError`"
msgstr ""

#: ../../ext/commands/api.rst:517
msgid ":exc:`~.commands.CommandOnCooldown`"
msgstr ""

#: ../../ext/commands/api.rst:518
msgid ":exc:`~.commands.MaxConcurrencyReached`"
msgstr ""

#: ../../ext/commands/api.rst:523
msgid ":exc:`~.commands.ExtensionError`"
msgstr ""

#: ../../ext/commands/api.rst:520
msgid ":exc:`~.commands.ExtensionAlreadyLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:521
msgid ":exc:`~.commands.ExtensionNotLoaded`"
msgstr ""

#: ../../ext/commands/api.rst:522
msgid ":exc:`~.commands.NoEntryPointError`"
msgstr ""

#: ../../ext/commands/api.rst:523
msgid ":exc:`~.commands.ExtensionFailed`"
msgstr ""

#: ../../ext/commands/api.rst:524
msgid ":exc:`~.commands.ExtensionNotFound`"
msgstr ""

#: ../../ext/commands/api.rst:525
msgid ":exc:`~.ClientException`"
msgstr ""

#: ../../ext/commands/api.rst:526
msgid ":exc:`~.commands.CommandRegistrationError`"
msgstr ""

#~ msgid ""
#~ "Logging on with a user token is"
#~ " against the Discord `Terms of "
#~ "Service <https://support.discordapp.com/hc/en-"
#~ "us/articles/115002192352>`_ and doing so might"
#~ " potentially get your account banned. "
#~ "Use this at your own risk."
#~ msgstr ""

#~ msgid "This function **can** be a coroutine."
#~ msgstr ""

#~ msgid ""
#~ "The user IDs that owns the bot."
#~ " This is similar to `owner_id`. If"
#~ " this is not set and the "
#~ "application is team based, then it "
#~ "is fetched automatically using "
#~ ":meth:`~.Bot.application_info`. For performance "
#~ "reasons it is recommended to use a"
#~ " :class:`set` for the collection. You "
#~ "cannot set both `owner_id` and "
#~ "`owner_ids`."
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr "매개변수"

#~ msgid ""
#~ "If the function should only be "
#~ "called once per :meth:`Command.invoke` call."
#~ msgstr ""

#~ msgid "Raises"
#~ msgstr "예외"

#~ msgid ""
#~ "Adds a :class:`.Command` or its "
#~ "subclasses into the internal list of "
#~ "commands."
#~ msgstr ""

#~ msgid "If the command is already registered."
#~ msgstr ""

#~ msgid "Example"
#~ msgstr "예제"

#~ msgid "Optional[:class:`AllowedMentions`]"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr "반환값"

#~ msgid "Return type"
#~ msgstr "반환 형식"

#~ msgid ""
#~ "Unlike regular global checks, this one"
#~ " is called only once per "
#~ ":meth:`Command.invoke` call."
#~ msgstr ""

#~ msgid "Examples"
#~ msgstr ""

#~ msgid ""
#~ "The number of guilds to retrieve. "
#~ "If ``None``, it retrieves every guild"
#~ " you have access to. Note, however,"
#~ " that this would make it a slow"
#~ " operation. Defaults to 100."
#~ msgstr ""

#~ msgid ""
#~ "Get a :class:`.Command` or subclasses "
#~ "from the internal list of commands."
#~ msgstr ""

#~ msgid ":class:`Command` or subclass"
#~ msgstr ""

#~ msgid ""
#~ "Remove a :class:`.Command` or subclasses "
#~ "from the internal list of commands."
#~ msgstr ""

#~ msgid ""
#~ "The command that was removed. If "
#~ "the name is not valid then `None`"
#~ " is returned instead."
#~ msgstr ""

#~ msgid ":class:`.Command` or subclass"
#~ msgstr ""

#~ msgid "Represents the connected client. None if not logged in."
#~ msgstr ""

#~ msgid ""
#~ "The short help text for the "
#~ "command. If this is not specified "
#~ "then the first line of the long"
#~ " help text is used instead."
#~ msgstr ""

#~ msgid "Union[:class:`list`, :class:`tuple`]"
#~ msgstr ""

#~ msgid ""
#~ "Retrieves the parameter OrderedDict without"
#~ " the context or self parameters."
#~ msgstr ""

#~ msgid "The name of the cog this command belongs to. None otherwise."
#~ msgstr ""

#~ msgid "A mapping of command name to :class:`.Command` or subclass objects."
#~ msgstr ""

#~ msgid ""
#~ "Returns a :class:`list` of "
#~ ":class:`.Command`\\s that are defined inside"
#~ " this cog."
#~ msgstr ""

#~ msgid ""
#~ "A list of attributes to apply to"
#~ " every command inside this cog. The"
#~ " dictionary is passed into the "
#~ ":class:`Command` (or its subclass) options "
#~ "at ``__init__``. If you specify "
#~ "attributes inside the command attribute "
#~ "in the class, it will override the"
#~ " one specified inside this attribute. "
#~ "For example:"
#~ msgstr ""

#~ msgid ""
#~ "A decorator that adds a cooldown "
#~ "to a :class:`.Command` or its "
#~ "subclasses."
#~ msgstr ""

#~ msgid "A command or subclass of a command that is going to be called."
#~ msgstr ""

#~ msgid ""
#~ "Returns the channel associated with this"
#~ " context's command. Shorthand for "
#~ ":attr:`.Message.channel`."
#~ msgstr ""

#~ msgid ""
#~ "Returns the author associated with this"
#~ " context's command. Shorthand for "
#~ ":attr:`.Message.author`"
#~ msgstr ""

#~ msgid ""
#~ "Similar to :attr:`.Guild.me` except it "
#~ "may return the :class:`.ClientUser` in "
#~ "private message contexts."
#~ msgstr ""

#~ msgid ""
#~ "If the invite is for a guild "
#~ "you have not joined, the guild and"
#~ " channel attributes of the returned "
#~ ":class:`.Invite` will be "
#~ ":class:`.PartialInviteGuild` and "
#~ ":class:`PartialInviteChannel` respectively."
#~ msgstr ""

#~ msgid ""
#~ "Checks if the command can be "
#~ "executed by checking all the predicates"
#~ " inside the :attr:`.checks` attribute. This"
#~ " also checks whether the command is"
#~ " disabled."
#~ msgstr ""

#~ msgid ""
#~ "Controls the mentions being processed in"
#~ " this message.  .. versionadded:: 1.4"
#~ msgstr ""

#~ msgid "Controls the mentions being processed in this message."
#~ msgstr ""

#~ msgid "Converts to a :class:`~discord.Colour`."
#~ msgstr ""

#~ msgid "API 레퍼런스"
#~ msgstr ""

#~ msgid ""
#~ "A decorator that converts the provided"
#~ " method into a Command, adds it "
#~ "to the bot, then returns it"
#~ msgstr ""

#~ msgid "Indicates if the websocket connection is closed."
#~ msgstr ""

#~ msgid "Specifies if the client's internal cache is ready for use."
#~ msgstr ""

#~ msgid "If any guild is unavailable or not large in the collection."
#~ msgstr ""

#~ msgid "List[:class:`.VoiceClient`]"
#~ msgstr ""

#~ msgid "Shortens text to fit into the :attr:`width`."
#~ msgstr ""

#~ msgid ""
#~ "Returns help command's ending note. This"
#~ " is mainly useful to override for "
#~ "i18n purposes."
#~ msgstr ""

#~ msgid "class"
#~ msgstr ""

#~ msgid "`list`"
#~ msgstr ""

#~ msgid "Prefer using :meth:`fetch_message_fast`."
#~ msgstr ""

#~ msgid ""
#~ "Retrieves a single :class:`~discord.Message` "
#~ "from the destination, using the history"
#~ " endpoint."
#~ msgstr ""

#~ msgid "The specified channel was not found."
#~ msgstr ""

#~ msgid "The message asked for, or None if there is no match."
#~ msgstr ""

#~ msgid "Optional[:class:`~discord.Message`]"
#~ msgstr ""

#~ msgid "Converts to a :class:`~discord.Colour`. .. versionchanged:: 1.5"
#~ msgstr ""

#~ msgid ":class:`BucketType`"
#~ msgstr ""

#~ msgid ":class:`Channel`"
#~ msgstr ""

#~ msgid ""
#~ "Controls the mentions being processed in"
#~ " this message. If this is passed, "
#~ "then the object is merged with "
#~ ":attr:`~discord.Client.allowed_mentions`. The merging "
#~ "behaviour only overrides attributes that "
#~ "have been explicitly passed to the "
#~ "object, otherwise it uses the attributes"
#~ " set in :attr:`~discord.Client.allowed_mentions`. "
#~ "If no object is passed at all "
#~ "then the defaults given by "
#~ ":attr:`~discord.Client.allowed_mentions` are used "
#~ "instead."
#~ msgstr ""
#~ "이 메시지에서 처리되는 맨션을 조정. 만약에 주어졌다면,"
#~ " 객체는 :attr:`~discord.Client.allowed_mentions`\\와 합체됩니다."
#~ " 합체되는 방식은 객체에 명시적으로 설정된 속성들만 "
#~ "오버라이드 하고, 명시되있지 않았다면 "
#~ ":attr:`~discord.Client.allowed_mentions`\\에 설정된 속성들을 "
#~ "사용합니다. 만약 그 어떤 객체들도 전달되지 않았다면 "
#~ ":attr:`~discord.Client.allowed_mentions`\\에 있는 기본값들을 "
#~ "사용합니다."

#~ msgid ""
#~ "Raise :exc:`.ChannelNotFound`, `MessageNotFound` or"
#~ " `ChannelNotReadable` instead of generic "
#~ ":exc:`.BadArgument`"
#~ msgstr ""

#~ msgid "Exception Hierarchy"
#~ msgstr ""

